%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 57 368 302
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 1500 1500 300 pap
%%Page: cds 1
gis
2 241 1497 1256 clwin
0 241 1499 1258 clwin
0 241 1499 1258 clwin
0 241 1500 1258 clwin
0 241 1499 1258 clwin
ssls
0 78 754 267 dls
728 267 dpb
781 267 dpv
754 241 dpv
dpu
39 0 178 476 dls
0 79 217 437 dls
0 79 230 437 dls
230 437 dlt
53 0 dlv
0 -39 dlv
dle
53 0 230 476 dls
230 516 dlt
53 0 dlv
0 39 dlv
dle
256 450 dlt
27 -13 dlv
-27 -13 dlv
dle
-39 0 859 476 dls
0 79 820 437 dls
0 79 807 437 dls
807 437 dlt
-53 0 dlv
0 -39 dlv
dle
-53 0 807 476 dls
807 516 dlt
-53 0 dlv
0 39 dlv
dle
781 450 dlt
-27 -13 dlv
27 -13 dlv
dle
1069 686 dlt
0 32 dlv
-26 7 dlv
52 16 dlv
-52 16 dlv
52 16 dlv
-52 15 dlv
52 16 dlv
-26 8 dlv
0 31 dlv
dle
0 84 1252 686 dls
0 57 1252 786 dls
1279 759 dlt
-13 8 dlv
-14 3 dlv
-13 -3 dlv
-13 -8 dlv
dle
53 0 1226 786 dls
516 652 dlt
-8 -3 dlv
-3 -7 dlv
3 -8 dlv
8 -3 dlv
dle
516 652 dlt
8 3 dlv
2 8 dlv
-2 7 dlv
-8 3 dlv
dle
-52 0 597 712 dls
-52 0 492 712 dls
-15 0 513 712 dls
0 16 505 704 dls
0 16 532 704 dls
545 712 dpb
542 725 dpv
534 736 dpv
524 741 dpv
513 741 dpv
503 736 dpv
495 725 dpv
492 712 dpv
495 699 dpv
503 689 dpv
513 683 dpv
524 683 dpv
534 689 dpv
542 699 dpv
dpu
18 0 178 1053 dls
217 1053 dpb
214 1061 dpv
207 1064 dpv
199 1061 dpv
196 1053 dpv
199 1045 dpv
207 1043 dpv
214 1045 dpv
dpu
0 -78 217 1092 dls
0 -78 230 1092 dls
275 1001 dlt
-26 13 dlv
26 13 dlv
dle
53 0 230 1053 dls
230 1014 dlt
53 0 dlv
0 -40 dlv
dle
230 1092 dlt
53 0 dlv
0 40 dlv
dle
-18 0 859 1053 dls
841 1053 dpb
838 1061 dpv
830 1064 dpv
823 1061 dpv
820 1053 dpv
823 1045 dpv
830 1043 dpv
838 1045 dpv
dpu
0 -78 820 1092 dls
0 -78 807 1092 dls
762 1001 dlt
26 13 dlv
-26 13 dlv
dle
-53 0 807 1053 dls
807 1014 dlt
-53 0 dlv
0 -40 dlv
dle
807 1092 dlt
-53 0 dlv
0 40 dlv
dle
0 367 125 686 dls
0 131 125 345 dls
53 0 125 1053 dls
53 0 125 476 dls
158 0 125 345 dls
158 0 125 686 dls
0 131 283 555 dls
0 79 283 974 dls
0 78 283 398 dls
0 53 283 345 dls
0 52 283 922 dls
0 52 283 1132 dls
0 53 283 712 dls
0 26 283 686 dls
296 345 dpb
293 353 dpv
285 358 dpv
277 356 dpv
269 351 dpv
269 340 dpv
275 335 dpv
285 332 dpv
293 337 dpv
dps
296 686 dpb
293 694 dpv
285 699 dpv
277 697 dpv
269 691 dpv
269 681 dpv
275 676 dpv
285 673 dpv
293 678 dpv
dps
296 712 dpb
293 720 dpv
285 725 dpv
277 723 dpv
269 718 dpv
269 707 dpv
275 702 dpv
285 699 dpv
293 704 dpv
dps
157 0 283 712 dls
471 0 283 345 dls
-471 -157 754 922 dls
471 0 283 1184 dls
471 -157 283 922 dls
157 0 597 712 dls
0 131 754 555 dls
0 78 754 398 dls
0 79 754 974 dls
0 52 754 1132 dls
0 52 754 922 dls
0 53 754 712 dls
0 53 754 345 dls
0 26 754 686 dls
767 1184 dpb
765 1192 dpv
757 1197 dpv
749 1195 dpv
741 1189 dpv
741 1179 dpv
747 1174 dpv
757 1171 dpv
765 1176 dpv
dps
767 712 dpb
765 720 dpv
757 725 dpv
749 723 dpv
741 718 dpv
741 707 dpv
747 702 dpv
757 699 dpv
765 704 dpv
dps
767 686 dpb
765 694 dpv
757 699 dpv
749 697 dpv
741 691 dpv
741 681 dpv
747 676 dpv
757 673 dpv
765 678 dpv
dps
158 0 754 345 dls
158 0 754 686 dls
53 0 859 1053 dls
53 0 859 476 dls
0 367 912 686 dls
0 131 912 345 dls
925 345 dpb
922 353 dpv
914 358 dpv
906 356 dpv
899 351 dpv
899 340 dpv
904 335 dpv
914 332 dpv
922 337 dpv
dps
315 0 754 1184 dls
157 0 912 345 dls
0 341 1069 345 dls
0 341 1069 843 dls
1082 345 dpb
1079 353 dpv
1072 358 dpv
1064 356 dpv
1056 351 dpv
1056 340 dpv
1061 335 dpv
1072 332 dpv
1079 337 dpv
dps
1082 1184 dpb
1079 1192 dpv
1072 1197 dpv
1064 1195 dpv
1056 1189 dpv
1056 1179 dpv
1061 1174 dpv
1072 1171 dpv
1079 1176 dpv
dps
183 0 1069 1184 dls
183 0 1069 345 dls
0 341 1252 345 dls
0 341 1252 843 dls
634 757 dlt
10 -26 dlv
10 26 dlv
dle
5 0 657 757 dls
0 -26 660 757 dls
5 0 657 731 dls
670 731 dlt
0 26 dlv
17 -26 dlv
0 26 dlv
dle
697 751 dlt
0 1 dlv
2 2 dlv
1 2 dlv
2 1 dlv
5 0 dlv
3 -1 dlv
1 -2 dlv
1 -2 dlv
0 -3 dlv
-1 -2 dlv
-2 -4 dlv
-13 -12 dlv
18 0 dlv
dle
321 757 dlt
10 -26 dlv
9 26 dlv
dle
5 0 344 757 dls
0 -26 347 757 dls
5 0 344 731 dls
357 731 dlt
0 26 dlv
17 -26 dlv
0 26 dlv
dle
387 752 dlt
2 1 dlv
4 4 dlv
0 -26 dlv
dle
1098 1229 dlt
10 -27 dlv
10 27 dlv
dle
1124 1202 dlt
0 27 dlv
11 0 dlv
4 -2 dlv
1 -1 dlv
1 -2 dlv
0 -3 dlv
-1 -2 dlv
-1 -2 dlv
-4 -1 dlv
-11 0 dlv
dle
8 -14 1133 1216 dls
1166 1229 dlt
-16 0 dlv
0 -27 dlv
16 0 dlv
dle
10 0 1150 1216 dls
1191 1222 dlt
-1 3 dlv
-2 2 dlv
-3 2 dlv
-5 0 dlv
-2 -2 dlv
-3 -2 dlv
-1 -3 dlv
-1 -3 dlv
0 -7 dlv
1 -3 dlv
1 -3 dlv
3 -2 dlv
2 -2 dlv
5 0 dlv
3 2 dlv
2 2 dlv
1 3 dlv
dle
744 335 765 356 dbs
167 466 188 487 dbs
272 545 293 566 dbs
272 466 293 487 dbs
272 387 293 408 dbs
849 466 870 487 dbs
744 545 765 566 dbs
744 466 765 487 dbs
744 387 765 408 dbs
1058 697 dpb
1079 697 dpv
1079 676 dpv
1058 676 dpv
dps
1058 854 dpb
1079 854 dpv
1079 833 dpv
1058 833 dpv
dps
1242 697 dpb
1263 697 dpv
1263 676 dpv
1242 676 dpv
dps
1242 854 dpb
1263 854 dpv
1263 833 dpv
1242 833 dpv
dps
429 702 450 723 dbs
587 702 608 723 dbs
167 1043 188 1064 dbs
272 1121 293 1142 dbs
272 1043 293 1064 dbs
272 964 293 985 dbs
849 1043 870 1064 dbs
744 1121 765 1142 dbs
744 1043 765 1064 dbs
744 964 765 985 dbs
794 305 dlt
0 -14 dlv
-1 -2 dlv
-1 -1 dlv
-2 -1 dlv
-2 0 dlv
-2 1 dlv
dle
794 303 dlt
-2 1 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
2 2 dlv
dle
0 -12 801 305 dls
801 302 dlt
2 2 dlv
2 1 dlv
3 0 dlv
1 -1 dlv
1 -2 dlv
0 -9 dlv
dle
0 -18 827 311 dls
827 303 dlt
-2 1 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
2 2 dlv
dle
313 568 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
337 584 dlt
0 1 dlv
1 2 dlv
1 1 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -3 dlv
-10 -10 dlv
14 0 dlv
dle
685 568 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
723 575 dlt
-15 0 dlv
10 14 dlv
0 -21 dlv
dle
1112 817 dlt
0 21 dlv
9 0 dlv
3 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-1 -1 dlv
-3 -1 dlv
-9 0 dlv
dle
7 -11 1119 828 dls
0 -21 1133 838 dls
1297 833 dlt
-1 2 dlv
-2 2 dlv
-2 1 dlv
-4 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
4 0 dlv
2 1 dlv
2 2 dlv
1 2 dlv
dle
0 -21 1304 838 dls
445 740 dlt
21 8 dlv
-21 7 dlv
dle
14 0 452 771 dls
455 771 dlt
-2 -2 dlv
-1 -2 dlv
0 -3 dlv
1 -2 dlv
2 -2 dlv
3 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 2 dlv
dle
455 790 dlt
-2 -2 dlv
-1 -2 dlv
0 -3 dlv
1 -2 dlv
2 -2 dlv
3 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 2 dlv
dle
310 943 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
336 960 dlt
2 1 dlv
3 3 dlv
0 -21 dlv
dle
688 943 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
713 964 dlt
11 0 dlv
-6 -8 dlv
3 0 dlv
2 -1 dlv
1 -1 dlv
1 -3 dlv
0 -2 dlv
-1 -3 dlv
-2 -2 dlv
-3 -1 dlv
-3 0 dlv
-3 1 dlv
-1 1 dlv
-1 2 dlv
dle
0 241 1500 1258 clwin
gfs
%%Trailer
%%EOF
