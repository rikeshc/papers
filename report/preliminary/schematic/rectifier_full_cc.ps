%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 60 368 300
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 1500 1500 300 pap
%%Page: cds 1
gis
0 250 1499 1248 clwin
2 250 1496 1246 clwin
0 250 1499 1246 clwin
0 250 1500 1248 clwin
0 250 1499 1246 clwin
ssls
537 642 dlt
-9 -3 dlv
-3 -9 dlv
3 -8 dlv
9 -3 dlv
dle
537 642 dlt
8 3 dlv
3 8 dlv
-3 9 dlv
-8 3 dlv
dle
-58 0 626 708 dls
-57 0 511 708 dls
-17 0 534 708 dls
0 17 525 699 dls
0 17 554 699 dls
568 708 dpb
565 722 dpv
557 733 dpv
545 739 dpv
534 739 dpv
522 733 dpv
514 722 dpv
511 708 dpv
514 693 dpv
522 682 dpv
534 676 dpv
545 676 dpv
557 682 dpv
565 693 dpv
dpu
0 86 769 278 dls
740 278 dpb
797 278 dpv
769 250 dpv
dpu
43 0 196 507 dls
0 86 239 464 dls
0 86 253 464 dls
253 464 dlt
58 0 dlv
0 -43 dlv
dle
58 0 253 507 dls
253 550 dlt
58 0 dlv
0 43 dlv
dle
282 479 dlt
29 -15 dlv
-29 -14 dlv
dle
-43 0 883 507 dls
0 86 840 464 dls
0 86 826 464 dls
826 464 dlt
-57 0 dlv
0 -43 dlv
dle
-57 0 826 507 dls
826 550 dlt
-57 0 dlv
0 43 dlv
dle
797 479 dlt
-28 -15 dlv
28 -14 dlv
dle
1055 650 dlt
0 35 dlv
-29 8 dlv
58 17 dlv
-58 18 dlv
58 17 dlv
-58 17 dlv
58 17 dlv
-29 9 dlv
0 34 dlv
dle
0 92 1227 650 dls
0 63 1227 759 dls
1255 730 dlt
-14 9 dlv
-14 3 dlv
-15 -3 dlv
-14 -9 dlv
dle
57 0 1198 759 dls
20 0 196 1022 dls
239 1022 dpb
236 1031 dpv
228 1034 dpv
219 1031 dpv
216 1022 dpv
219 1014 dpv
228 1011 dpv
236 1014 dpv
dpu
0 -86 239 1065 dls
0 -86 253 1065 dls
302 965 dlt
-29 14 dlv
29 15 dlv
dle
58 0 253 1022 dls
253 979 dlt
58 0 dlv
0 -42 dlv
dle
253 1065 dlt
58 0 dlv
0 43 dlv
dle
-20 0 883 1022 dls
863 1022 dpb
860 1031 dpv
852 1034 dpv
843 1031 dpv
840 1022 dpv
843 1014 dpv
852 1011 dpv
860 1014 dpv
dpu
0 -86 840 1065 dls
0 -86 826 1065 dls
777 965 dlt
29 14 dlv
-29 15 dlv
dle
-57 0 826 1022 dls
826 979 dlt
-57 0 dlv
0 -42 dlv
dle
826 1065 dlt
-57 0 dlv
0 43 dlv
dle
458 114 311 765 dls
0 343 139 679 dls
0 143 139 364 dls
57 0 139 507 dls
57 0 139 1022 dls
172 0 139 679 dls
172 0 139 364 dls
0 86 311 593 dls
0 86 311 421 dls
0 85 311 937 dls
0 57 311 364 dls
0 58 311 1108 dls
0 58 311 879 dls
0 57 311 708 dls
0 29 311 679 dls
325 679 dpb
322 687 dpv
316 693 dpv
305 693 dpv
299 687 dpv
296 679 dpv
299 670 dpv
305 665 dpv
316 665 dpv
322 670 dpv
dps
325 364 dpb
322 373 dpv
316 378 dpv
305 378 dpv
299 373 dpv
296 364 dpv
299 355 dpv
305 350 dpv
316 350 dpv
322 355 dpv
dps
325 708 dpb
322 716 dpv
316 722 dpv
305 722 dpv
299 716 dpv
296 708 dpv
299 699 dpv
305 693 dpv
316 693 dpv
322 699 dpv
dps
143 0 311 708 dls
458 0 311 1166 dls
458 0 311 364 dls
458 -114 311 879 dls
143 0 626 708 dls
0 86 769 593 dls
0 86 769 421 dls
0 85 769 937 dls
0 57 769 364 dls
0 58 769 1108 dls
0 57 769 708 dls
0 58 769 879 dls
0 29 769 679 dls
783 1166 dpb
780 1174 dpv
774 1180 dpv
763 1180 dpv
757 1174 dpv
754 1166 dpv
757 1157 dpv
763 1151 dpv
774 1151 dpv
780 1157 dpv
dps
783 679 dpb
780 687 dpv
774 693 dpv
763 693 dpv
757 687 dpv
754 679 dpv
757 670 dpv
763 665 dpv
774 665 dpv
780 670 dpv
dps
783 708 dpb
780 716 dpv
774 722 dpv
763 722 dpv
757 716 dpv
754 708 dpv
757 699 dpv
763 693 dpv
774 693 dpv
780 699 dpv
dps
171 0 769 679 dls
171 0 769 364 dls
57 0 883 507 dls
57 0 883 1022 dls
0 343 940 679 dls
0 143 940 364 dls
955 364 dpb
952 373 dpv
946 378 dpv
935 378 dpv
929 373 dpv
926 364 dpv
929 355 dpv
935 350 dpv
946 350 dpv
952 355 dpv
dps
286 0 769 1166 dls
115 0 940 364 dls
0 344 1055 822 dls
0 286 1055 364 dls
1069 1166 dpb
1066 1174 dpv
1061 1180 dpv
1049 1180 dpv
1043 1174 dpv
1041 1166 dpv
1043 1157 dpv
1049 1151 dpv
1061 1151 dpv
1066 1157 dpv
dps
1069 364 dpb
1066 373 dpv
1061 378 dpv
1049 378 dpv
1043 373 dpv
1041 364 dpv
1043 355 dpv
1049 350 dpv
1061 350 dpv
1066 355 dpv
dps
172 0 1055 364 dls
172 0 1055 1166 dls
0 344 1227 822 dls
0 286 1227 364 dls
637 756 dlt
11 -28 dlv
11 28 dlv
dle
5 0 663 756 dls
0 -28 666 756 dls
5 0 663 728 dls
676 728 dlt
0 28 dlv
20 -28 dlv
0 28 dlv
dle
706 749 dlt
0 2 dlv
2 2 dlv
1 2 dlv
3 1 dlv
5 0 dlv
3 -1 dlv
1 -2 dlv
2 -2 dlv
0 -3 dlv
-2 -3 dlv
-2 -4 dlv
-14 -13 dlv
19 0 dlv
dle
352 756 dlt
11 -28 dlv
11 28 dlv
dle
5 0 378 756 dls
0 -28 381 756 dls
5 0 378 728 dls
392 728 dlt
0 28 dlv
19 -28 dlv
0 28 dlv
dle
424 751 dlt
3 1 dlv
4 4 dlv
0 -28 dlv
dle
1086 1214 dlt
11 -28 dlv
11 28 dlv
dle
1115 1186 dlt
0 28 dlv
12 0 dlv
4 -1 dlv
2 -2 dlv
1 -2 dlv
0 -3 dlv
-1 -3 dlv
-2 -1 dlv
-4 -1 dlv
-12 0 dlv
dle
9 -15 1125 1201 dls
1161 1214 dlt
-17 0 dlv
0 -28 dlv
17 0 dlv
dle
11 0 1144 1201 dls
1189 1207 dlt
-2 3 dlv
-2 3 dlv
-3 1 dlv
-6 0 dlv
-2 -1 dlv
-3 -3 dlv
-1 -3 dlv
-2 -4 dlv
0 -7 dlv
2 -4 dlv
1 -2 dlv
3 -3 dlv
2 -1 dlv
6 0 dlv
3 1 dlv
2 3 dlv
2 2 dlv
dle
442 696 465 719 dbs
614 696 637 719 dbs
757 353 780 375 dbs
185 496 208 519 dbs
299 582 322 604 dbs
299 496 322 519 dbs
299 410 322 433 dbs
872 496 895 519 dbs
757 582 780 604 dbs
757 496 780 519 dbs
757 410 780 433 dbs
1043 662 dpb
1066 662 dpv
1066 639 dpv
1043 639 dpv
dps
1043 833 dpb
1066 833 dpv
1066 811 dpv
1043 811 dpv
dps
1215 662 dpb
1238 662 dpv
1238 639 dpv
1215 639 dpv
dps
1215 833 dpb
1238 833 dpv
1238 811 dpv
1215 811 dpv
dps
185 1011 208 1034 dbs
299 1097 322 1120 dbs
299 1011 322 1034 dbs
299 925 322 948 dbs
872 1011 895 1034 dbs
757 1097 780 1120 dbs
757 1011 780 1034 dbs
757 925 780 948 dbs
812 320 dlt
0 -15 dlv
-1 -3 dlv
-1 -1 dlv
-2 -1 dlv
-3 0 dlv
-2 1 dlv
dle
812 317 dlt
-2 2 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
0 -13 819 320 dls
819 316 dlt
3 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -9 dlv
dle
0 -20 848 327 dls
848 317 dlt
-2 2 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
460 737 dlt
22 9 dlv
-22 9 dlv
dle
15 0 467 772 dls
470 772 dlt
-2 -2 dlv
-1 -2 dlv
0 -4 dlv
1 -2 dlv
2 -2 dlv
4 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 4 dlv
-1 2 dlv
-2 2 dlv
dle
470 793 dlt
-2 -2 dlv
-1 -3 dlv
0 -3 dlv
1 -2 dlv
2 -2 dlv
4 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 3 dlv
-1 3 dlv
-2 2 dlv
dle
344 607 dlt
0 23 dlv
8 -23 dlv
9 23 dlv
0 -23 dlv
dle
370 625 dlt
0 1 dlv
1 2 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -4 dlv
-11 -11 dlv
15 0 dlv
dle
693 607 dlt
0 23 dlv
9 -23 dlv
8 23 dlv
0 -23 dlv
dle
734 615 dlt
-16 0 dlv
11 15 dlv
0 -23 dlv
dle
1102 793 dlt
0 23 dlv
10 0 dlv
3 -1 dlv
1 -1 dlv
2 -2 dlv
0 -2 dlv
-2 -2 dlv
-1 -2 dlv
-3 -1 dlv
-10 0 dlv
dle
8 -12 1110 805 dls
0 -23 1125 816 dls
1275 811 dlt
-1 2 dlv
-2 2 dlv
-3 1 dlv
-4 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
2 -3 dlv
2 -1 dlv
4 0 dlv
3 1 dlv
2 3 dlv
1 2 dlv
dle
0 -23 1283 816 dls
341 902 dlt
0 23 dlv
9 -23 dlv
8 23 dlv
0 -23 dlv
dle
369 921 dlt
2 1 dlv
4 3 dlv
0 -23 dlv
dle
696 902 dlt
0 23 dlv
8 -23 dlv
9 23 dlv
0 -23 dlv
dle
723 925 dlt
12 0 dlv
-7 -9 dlv
4 0 dlv
2 -1 dlv
1 -1 dlv
1 -3 dlv
0 -2 dlv
-1 -4 dlv
-2 -2 dlv
-3 -1 dlv
-4 0 dlv
-3 1 dlv
-1 1 dlv
-1 3 dlv
dle
0 250 1500 1248 clwin
gfs
%%Trailer
%%EOF
