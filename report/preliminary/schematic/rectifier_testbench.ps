%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 121 368 238
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 1500 1500 300 pap
%%Page: cds 1
gis
2 508 1496 991 clwin
2 508 1497 990 clwin
0 508 1499 990 clwin
0 508 1500 991 clwin
0 508 1499 990 clwin
ssls
734 955 dlt
0 23 dlv
10 0 dlv
3 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-1 -1 dlv
-3 -2 dlv
-10 0 dlv
dle
7 -12 742 967 dls
771 978 dlt
-14 0 dlv
0 -23 dlv
14 0 dlv
dle
9 0 757 967 dls
793 973 dlt
-1 2 dlv
-2 2 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
2 -2 dlv
2 -2 dlv
5 0 dlv
2 2 dlv
2 2 dlv
1 2 dlv
dle
0 -23 805 978 dls
16 0 797 978 dls
4 0 816 978 dls
0 -23 818 978 dls
4 0 816 955 dls
827 955 dlt
0 23 dlv
14 0 dlv
dle
9 0 827 967 dls
4 0 845 978 dls
0 -23 847 978 dls
4 0 845 955 dls
870 978 dlt
-15 0 dlv
0 -23 dlv
15 0 dlv
dle
9 0 855 967 dls
876 955 dlt
0 23 dlv
10 0 dlv
3 -1 dlv
1 -1 dlv
2 -2 dlv
0 -2 dlv
-2 -2 dlv
-1 -1 dlv
-3 -2 dlv
-10 0 dlv
dle
8 -12 884 967 dls
17 0 896 953 dls
921 955 dlt
0 23 dlv
10 0 dlv
3 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-1 -1 dlv
-3 -2 dlv
-10 0 dlv
dle
7 -12 929 967 dls
959 973 dlt
-1 2 dlv
-2 2 dlv
-2 1 dlv
-4 0 dlv
-3 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
2 -2 dlv
3 -2 dlv
4 0 dlv
2 2 dlv
2 2 dlv
1 2 dlv
dle
982 973 dlt
-1 2 dlv
-2 2 dlv
-2 1 dlv
-4 0 dlv
-3 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
2 -2 dlv
3 -2 dlv
4 0 dlv
2 2 dlv
2 2 dlv
1 2 dlv
dle
0 69 1143 530 dls
1120 530 dpb
1166 530 dpv
1143 508 dpv
dpu
0 69 1281 530 dls
1258 530 dpb
1304 530 dpv
1281 508 dpv
dpu
0 69 546 530 dls
523 530 dpb
569 530 dpv
546 508 dpv
dpu
0 74 1143 599 dls
0 50 1143 687 dls
1166 664 dlt
-11 7 dlv
-12 2 dlv
-11 -2 dlv
-12 -7 dlv
dle
46 0 1120 687 dls
0 53 1281 643 dls
0 34 1281 703 dls
0 35 1281 599 dls
1281 643 dlt
9 12 dlv
-18 0 dlv
9 -12 dlv
dle
1306 657 dpb
1304 668 dpv
1295 675 dpv
1283 680 dpv
1272 677 dpv
1263 673 dpv
1256 661 dpv
1256 652 dpv
1263 641 dpv
1272 636 dpv
1283 634 dpv
1295 638 dpv
1304 645 dpv
dpu
1306 680 dpb
1304 691 dpv
1295 698 dpv
1283 703 dpv
1272 700 dpv
1263 696 dpv
1256 684 dpv
1256 675 dpv
1263 664 dpv
1272 659 dpv
1283 657 dpv
1295 661 dpv
1304 668 dpv
dpu
217 831 dlt
-2 7 dlv
-7 3 dlv
-7 -3 dlv
-2 -7 dlv
dle
217 831 dlt
3 -7 dlv
7 -2 dlv
7 2 dlv
2 7 dlv
dle
0 46 270 760 dls
0 46 270 852 dls
0 13 270 834 dls
14 0 263 841 dls
14 0 263 818 dls
296 829 dpb
293 841 dpv
284 847 dpv
273 852 dpv
261 850 dpv
252 845 dpv
245 834 dpv
245 824 dpv
252 813 dpv
261 808 dpv
273 806 dpv
284 811 dpv
293 818 dpv
dpu
92 0 546 714 dls
92 0 546 760 dls
92 0 546 806 dls
92 0 982 829 dls
92 0 546 852 dls
92 0 546 898 dls
276 344 638 668 dbu
0 -15 805 786 dls
805 780 dlt
1 3 dlv
3 2 dlv
2 1 dlv
3 0 dlv
dle
818 780 dlt
14 0 dlv
0 2 dlv
-2 2 dlv
-1 1 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-3 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
3 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
3 2 dlv
dle
851 783 dlt
-2 2 dlv
-2 1 dlv
-3 0 dlv
-3 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
2 -2 dlv
3 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
860 794 dlt
0 -19 dlv
1 -3 dlv
2 -1 dlv
2 0 dlv
dle
7 0 857 786 dls
871 794 dlt
1 -1 dlv
1 1 dlv
-1 1 dlv
-1 -1 dlv
dle
0 -15 872 786 dls
887 794 dlt
-2 0 dlv
-2 -1 dlv
-1 -3 dlv
0 -19 dlv
dle
7 0 879 786 dls
893 794 dlt
1 -1 dlv
1 1 dlv
-1 1 dlv
-1 -1 dlv
dle
0 -15 894 786 dls
902 780 dlt
13 0 dlv
0 2 dlv
-1 2 dlv
-2 1 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
3 2 dlv
dle
0 -15 922 786 dls
922 780 dlt
1 3 dlv
3 2 dlv
2 1 dlv
3 0 dlv
dle
184 0 270 898 dls
0 92 454 806 dls
466 898 dpb
463 907 dpv
454 909 dpv
445 907 dpv
443 898 dpv
445 889 dpv
454 887 dpv
463 889 dpv
dps
230 0 270 760 dls
0 92 500 760 dls
511 760 dpb
509 769 dpv
500 772 dpv
491 769 dpv
488 760 dpv
491 751 dpv
500 749 dpv
509 751 dpv
dps
92 0 454 898 dls
92 0 454 806 dls
46 0 500 852 dls
46 0 500 760 dls
0 115 546 599 dls
69 0 1074 829 dls
0 92 1143 737 dls
1155 829 dpb
1152 838 dpv
1143 841 dpv
1134 838 dpv
1132 829 dpv
1134 820 dpv
1143 818 dpv
1152 820 dpv
dps
138 0 1143 829 dls
0 92 1281 737 dls
349 730 dlt
9 -23 dlv
9 23 dlv
dle
371 730 dlt
1 -1 dlv
2 1 dlv
-2 1 dlv
-1 -1 dlv
dle
0 -16 372 723 dls
0 -16 381 723 dls
381 718 dlt
3 4 dlv
3 1 dlv
3 0 dlv
2 -1 dlv
1 -4 dlv
0 -11 dlv
dle
402 725 dlt
0 1 dlv
1 2 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -4 dlv
-11 -11 dlv
15 0 dlv
dle
1175 868 dlt
9 -23 dlv
9 23 dlv
dle
0 -15 1198 860 dls
1198 854 dlt
1 3 dlv
3 2 dlv
2 1 dlv
3 0 dlv
dle
1211 854 dlt
13 0 dlv
0 2 dlv
-1 2 dlv
-1 1 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-3 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
3 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
1244 857 dlt
-2 2 dlv
-2 1 dlv
-3 0 dlv
-3 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
2 -2 dlv
3 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
351 937 dlt
8 -23 dlv
9 23 dlv
dle
372 937 dlt
2 -1 dlv
1 1 dlv
-1 1 dlv
-2 -1 dlv
dle
0 -15 374 929 dls
0 -15 382 929 dls
382 925 dlt
4 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -11 dlv
dle
405 933 dlt
2 1 dlv
4 3 dlv
0 -23 dlv
dle
1134 590 1152 609 dbs
1272 590 1290 609 dbs
537 590 555 609 dbs
1134 609 dpb
1152 609 dpv
1152 590 dpv
1134 590 dpv
dps
1134 746 dpb
1152 746 dpv
1152 728 dpv
1134 728 dpv
dps
1272 728 1290 746 dbs
1272 590 1290 609 dbs
261 889 279 907 dbs
261 751 279 769 dbs
537 843 555 861 dbs
537 889 555 907 dbs
537 705 555 723 dbs
537 797 555 815 dbs
537 751 555 769 dbs
1065 820 1083 838 dbs
1178 564 dlt
0 -12 dlv
-1 -2 dlv
-1 -1 dlv
-1 -1 dlv
-3 0 dlv
-1 1 dlv
dle
1178 562 dlt
-2 1 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 -1 dlv
3 0 dlv
1 1 dlv
2 2 dlv
dle
0 -11 1184 564 dls
1184 561 dlt
2 2 dlv
2 1 dlv
2 0 dlv
1 -1 dlv
1 -2 dlv
0 -8 dlv
dle
0 -17 1207 570 dls
1207 562 dlt
-2 1 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -2 dlv
0 -2 dlv
0 -2 dlv
2 -2 dlv
1 -1 dlv
3 0 dlv
1 1 dlv
2 2 dlv
dle
1315 564 dlt
0 -12 dlv
0 -2 dlv
-1 -1 dlv
-2 -1 dlv
-2 0 dlv
-1 1 dlv
dle
1315 562 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
dle
0 -11 1322 564 dls
1322 561 dlt
2 2 dlv
1 1 dlv
3 0 dlv
1 -1 dlv
1 -2 dlv
0 -8 dlv
dle
0 -17 1345 570 dls
1345 562 dlt
-2 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 -1 dlv
2 0 dlv
2 1 dlv
2 2 dlv
dle
580 564 dlt
0 -12 dlv
0 -2 dlv
-1 -1 dlv
-2 -1 dlv
-2 0 dlv
-2 1 dlv
dle
580 562 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
dle
0 -11 586 564 dls
586 561 dlt
3 2 dlv
1 1 dlv
3 0 dlv
1 -1 dlv
1 -2 dlv
0 -8 dlv
dle
0 -17 609 570 dls
609 562 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
dle
671 720 dlt
-1 2 dlv
-2 3 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-2 -3 dlv
-1 -2 dlv
-1 -3 dlv
0 -5 dlv
1 -4 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
2 2 dlv
1 2 dlv
0 4 dlv
-5 0 dlv
dle
679 703 dlt
0 23 dlv
15 -23 dlv
0 23 dlv
dle
703 703 dlt
0 23 dlv
8 0 dlv
3 -1 dlv
2 -3 dlv
1 -2 dlv
1 -3 dlv
0 -5 dlv
-1 -4 dlv
-1 -2 dlv
-2 -2 dlv
-3 -1 dlv
-8 0 dlv
dle
653 772 dlt
8 -23 dlv
9 23 dlv
dle
5 0 673 772 dls
0 -23 676 772 dls
5 0 673 749 dls
684 749 dlt
0 23 dlv
16 -23 dlv
0 23 dlv
dle
708 766 dlt
0 1 dlv
2 2 dlv
1 2 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
1 -2 dlv
2 -2 dlv
0 -2 dlv
-2 -2 dlv
-2 -3 dlv
-11 -11 dlv
16 0 dlv
dle
18 0 727 747 dls
752 766 dlt
0 1 dlv
1 2 dlv
1 2 dlv
3 1 dlv
4 0 dlv
2 -1 dlv
1 -2 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -3 dlv
-11 -11 dlv
15 0 dlv
dle
653 818 dlt
8 -23 dlv
9 23 dlv
dle
5 0 673 818 dls
0 -23 676 818 dls
5 0 673 795 dls
684 795 dlt
0 23 dlv
16 -23 dlv
0 23 dlv
dle
711 813 dlt
2 1 dlv
3 4 dlv
0 -23 dlv
dle
17 0 724 792 dls
749 812 dlt
0 1 dlv
1 2 dlv
1 2 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -2 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -3 dlv
-11 -11 dlv
15 0 dlv
dle
880 841 dlt
9 -23 dlv
9 23 dlv
dle
903 818 dlt
0 23 dlv
10 0 dlv
3 -2 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-1 -1 dlv
-3 -1 dlv
-10 0 dlv
dle
7 -12 911 830 dls
940 841 dlt
-14 0 dlv
0 -23 dlv
14 0 dlv
dle
9 0 926 830 dls
962 835 dlt
-1 2 dlv
-2 2 dlv
-2 2 dlv
-5 0 dlv
-2 -2 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
2 2 dlv
1 2 dlv
dle
653 864 dlt
8 -23 dlv
9 23 dlv
dle
5 0 673 864 dls
0 -23 676 864 dls
5 0 673 841 dls
684 841 dlt
0 23 dlv
16 -23 dlv
0 23 dlv
dle
708 858 dlt
0 1 dlv
2 2 dlv
1 1 dlv
2 2 dlv
4 0 dlv
2 -2 dlv
1 -1 dlv
2 -2 dlv
0 -2 dlv
-2 -2 dlv
-2 -3 dlv
-11 -11 dlv
16 0 dlv
dle
18 0 727 838 dls
754 859 dlt
3 1 dlv
3 4 dlv
0 -23 dlv
dle
653 909 dlt
8 -22 dlv
9 22 dlv
dle
5 0 673 909 dls
0 -22 676 909 dls
5 0 673 887 dls
684 887 dlt
0 22 dlv
16 -22 dlv
0 22 dlv
dle
711 905 dlt
2 1 dlv
3 3 dlv
0 -22 dlv
dle
17 0 724 884 dls
751 905 dlt
2 1 dlv
4 3 dlv
0 -22 dlv
dle
1182 728 dlt
-1 2 dlv
-2 2 dlv
-1 1 dlv
-4 0 dlv
-2 -1 dlv
-1 -2 dlv
-1 -2 dlv
-1 -2 dlv
0 -5 dlv
1 -2 dlv
1 -2 dlv
1 -2 dlv
2 -1 dlv
4 0 dlv
1 1 dlv
2 2 dlv
1 2 dlv
dle
0 -12 1188 726 dls
1188 721 dlt
1 3 dlv
2 2 dlv
1 0 dlv
3 0 dlv
dle
1199 733 dlt
0 -1 dlv
1 1 dlv
-1 0 dlv
dle
0 -12 1199 726 dls
0 -18 1206 726 dls
1206 724 dlt
2 2 dlv
2 0 dlv
3 0 dlv
1 0 dlv
2 -2 dlv
1 -3 dlv
0 -2 dlv
-1 -2 dlv
-2 -2 dlv
-1 -1 dlv
-3 0 dlv
-2 1 dlv
-2 2 dlv
dle
3 0 1306 733 dls
0 -19 1307 733 dls
3 0 1306 714 dls
0 -19 1314 733 dls
1325 726 dlt
-2 0 dlv
-2 -2 dlv
0 -3 dlv
0 -2 dlv
0 -2 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
1 1 dlv
2 2 dlv
1 2 dlv
0 2 dlv
-1 3 dlv
-2 2 dlv
-1 0 dlv
-3 0 dlv
dle
0 -12 1348 726 dls
1348 724 dlt
-2 2 dlv
-2 0 dlv
-2 0 dlv
-2 0 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
2 2 dlv
dle
0 -19 1364 733 dls
1364 724 dlt
-1 2 dlv
-2 0 dlv
-3 0 dlv
-2 0 dlv
-1 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
1 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
1 2 dlv
dle
294 893 dlt
7 -18 dlv
7 18 dlv
dle
0 -12 322 887 dls
322 885 dlt
-2 1 dlv
-1 1 dlv
-3 0 dlv
-2 -1 dlv
-2 -1 dlv
0 -3 dlv
0 -2 dlv
0 -2 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
1 1 dlv
2 2 dlv
dle
339 885 dlt
-2 1 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
2 2 dlv
dle
0 508 1500 991 clwin
gfs
%%Trailer
%%EOF
