%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 63 368 296
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 1500 1500 300 pap
%%Page: cds 1
gis
0 266 1498 1232 clwin
2 266 1496 1230 clwin
0 266 1499 1230 clwin
0 266 1500 1232 clwin
0 266 1499 1230 clwin
ssls
0 86 769 294 dls
740 294 dpb
797 294 dpv
769 266 dpv
dpu
43 0 196 523 dls
0 86 239 480 dls
0 86 253 480 dls
253 480 dlt
58 0 dlv
0 -43 dlv
dle
58 0 253 523 dls
253 566 dlt
58 0 dlv
0 43 dlv
dle
282 495 dlt
29 -15 dlv
-29 -14 dlv
dle
-43 0 883 523 dls
0 86 840 480 dls
0 86 826 480 dls
826 480 dlt
-57 0 dlv
0 -43 dlv
dle
-57 0 826 523 dls
826 566 dlt
-57 0 dlv
0 43 dlv
dle
797 495 dlt
-28 -15 dlv
28 -14 dlv
dle
0 92 1227 666 dls
0 63 1227 775 dls
1255 746 dlt
-14 9 dlv
-14 3 dlv
-15 -3 dlv
-14 -9 dlv
dle
57 0 1198 775 dls
1055 666 dlt
0 35 dlv
-29 8 dlv
58 17 dlv
-58 18 dlv
58 17 dlv
-58 17 dlv
58 17 dlv
-29 9 dlv
0 34 dlv
dle
537 686 dlt
-9 -3 dlv
-3 -8 dlv
3 -9 dlv
9 -3 dlv
dle
537 686 dlt
8 3 dlv
3 9 dlv
-3 8 dlv
-8 3 dlv
dle
-58 0 626 752 dls
-57 0 511 752 dls
-17 0 534 752 dls
0 17 525 744 dls
0 17 554 744 dls
568 752 dpb
565 766 dpv
557 778 dpv
545 784 dpv
534 784 dpv
522 778 dpv
514 766 dpv
511 752 dpv
514 738 dpv
522 726 dpv
534 721 dpv
545 721 dpv
557 726 dpv
565 738 dpv
dpu
-43 0 883 1038 dls
0 86 840 995 dls
0 86 826 995 dls
826 995 dlt
-57 0 dlv
0 -42 dlv
dle
-57 0 826 1038 dls
826 1081 dlt
-57 0 dlv
0 43 dlv
dle
797 1010 dlt
-28 -15 dlv
28 -14 dlv
dle
43 0 196 1038 dls
0 86 239 995 dls
0 86 253 995 dls
253 995 dlt
58 0 dlv
0 -42 dlv
dle
58 0 253 1038 dls
253 1081 dlt
58 0 dlv
0 43 dlv
dle
282 1010 dlt
29 -15 dlv
-29 -14 dlv
dle
0 143 139 895 dls
0 143 139 380 dls
57 0 139 1038 dls
57 0 139 523 dls
172 0 139 895 dls
172 0 139 380 dls
0 143 311 752 dls
0 143 311 609 dls
0 85 311 953 dls
0 86 311 437 dls
0 58 311 1124 dls
0 58 311 895 dls
0 57 311 380 dls
325 895 dpb
322 904 dpv
316 910 dpv
305 910 dpv
299 904 dpv
296 895 dpv
299 887 dpv
305 881 dpv
316 881 dpv
322 887 dpv
dps
325 752 dpb
322 761 dpv
316 766 dpv
305 766 dpv
299 761 dpv
296 752 dpv
299 744 dpv
305 738 dpv
316 738 dpv
322 744 dpv
dps
325 380 dpb
322 389 dpv
316 394 dpv
305 394 dpv
299 389 dpv
296 380 dpv
299 371 dpv
305 366 dpv
316 366 dpv
322 371 dpv
dps
143 0 311 752 dls
458 0 311 1182 dls
458 0 311 380 dls
143 0 626 752 dls
0 143 769 609 dls
0 143 769 752 dls
0 85 769 953 dls
0 86 769 437 dls
0 58 769 1124 dls
0 58 769 895 dls
0 57 769 380 dls
783 895 dpb
780 904 dpv
774 910 dpv
763 910 dpv
757 904 dpv
754 895 dpv
757 887 dpv
763 881 dpv
774 881 dpv
780 887 dpv
dps
783 752 dpb
780 761 dpv
774 766 dpv
763 766 dpv
757 761 dpv
754 752 dpv
757 744 dpv
763 738 dpv
774 738 dpv
780 744 dpv
dps
783 1182 dpb
780 1190 dpv
774 1196 dpv
763 1196 dpv
757 1190 dpv
754 1182 dpv
757 1173 dpv
763 1167 dpv
774 1167 dpv
780 1173 dpv
dps
171 0 769 895 dls
171 0 769 380 dls
57 0 883 1038 dls
57 0 883 523 dls
0 143 940 895 dls
0 143 940 380 dls
955 380 dpb
952 389 dpv
946 394 dpv
935 394 dpv
929 389 dpv
926 380 dpv
929 371 dpv
935 366 dpv
946 366 dpv
952 371 dpv
dps
286 0 769 1182 dls
115 0 940 380 dls
0 344 1055 838 dls
0 286 1055 380 dls
1069 380 dpb
1066 389 dpv
1061 394 dpv
1049 394 dpv
1043 389 dpv
1041 380 dpv
1043 371 dpv
1049 366 dpv
1061 366 dpv
1066 371 dpv
dps
1069 1182 dpb
1066 1190 dpv
1061 1196 dpv
1049 1196 dpv
1043 1190 dpv
1041 1182 dpv
1043 1173 dpv
1049 1167 dpv
1061 1167 dpv
1066 1173 dpv
dps
172 0 1055 380 dls
172 0 1055 1182 dls
0 344 1227 838 dls
0 286 1227 380 dls
637 801 dlt
11 -29 dlv
11 29 dlv
dle
5 0 663 801 dls
0 -29 666 801 dls
5 0 663 772 dls
676 772 dlt
0 29 dlv
20 -29 dlv
0 29 dlv
dle
706 794 dlt
0 1 dlv
2 3 dlv
1 1 dlv
3 2 dlv
5 0 dlv
3 -2 dlv
1 -1 dlv
2 -3 dlv
0 -2 dlv
-2 -3 dlv
-2 -4 dlv
-14 -14 dlv
19 0 dlv
dle
352 801 dlt
11 -29 dlv
11 29 dlv
dle
5 0 378 801 dls
0 -29 381 801 dls
5 0 378 772 dls
392 772 dlt
0 29 dlv
19 -29 dlv
0 29 dlv
dle
424 795 dlt
3 2 dlv
4 4 dlv
0 -29 dlv
dle
1086 1230 dlt
11 -28 dlv
11 28 dlv
dle
1115 1202 dlt
0 28 dlv
12 0 dlv
4 -1 dlv
2 -2 dlv
1 -2 dlv
0 -3 dlv
-1 -3 dlv
-2 -1 dlv
-4 -1 dlv
-12 0 dlv
dle
9 -15 1125 1217 dls
1161 1230 dlt
-17 0 dlv
0 -28 dlv
17 0 dlv
dle
11 0 1144 1217 dls
1189 1223 dlt
-2 3 dlv
-2 3 dlv
-3 1 dlv
-6 0 dlv
-2 -1 dlv
-3 -3 dlv
-1 -3 dlv
-2 -4 dlv
0 -7 dlv
2 -4 dlv
1 -2 dlv
3 -3 dlv
2 -1 dlv
6 0 dlv
3 1 dlv
2 3 dlv
2 2 dlv
dle
757 369 780 391 dbs
185 512 208 535 dbs
299 598 322 620 dbs
299 512 322 535 dbs
299 426 322 449 dbs
872 512 895 535 dbs
757 598 780 620 dbs
757 512 780 535 dbs
757 426 780 449 dbs
1215 678 dpb
1238 678 dpv
1238 655 dpv
1215 655 dpv
dps
1215 849 dpb
1238 849 dpv
1238 827 dpv
1215 827 dpv
dps
1043 678 dpb
1066 678 dpv
1066 655 dpv
1043 655 dpv
dps
1043 849 dpb
1066 849 dpv
1066 827 dpv
1043 827 dpv
dps
442 741 465 764 dbs
614 741 637 764 dbs
872 1027 895 1050 dbs
757 1113 780 1136 dbs
757 1027 780 1050 dbs
757 941 780 964 dbs
185 1027 208 1050 dbs
299 1113 322 1136 dbs
299 1027 322 1050 dbs
299 941 322 964 dbs
812 336 dlt
0 -15 dlv
-1 -3 dlv
-1 -1 dlv
-2 -1 dlv
-3 0 dlv
-2 1 dlv
dle
812 333 dlt
-2 2 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
0 -13 819 336 dls
819 332 dlt
3 3 dlv
2 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -9 dlv
dle
0 -20 848 343 dls
848 333 dlt
-2 2 dlv
-2 1 dlv
-3 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
2 1 dlv
2 2 dlv
dle
344 623 dlt
0 23 dlv
8 -23 dlv
9 23 dlv
0 -23 dlv
dle
370 641 dlt
0 1 dlv
1 2 dlv
1 1 dlv
2 1 dlv
5 0 dlv
2 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -4 dlv
-11 -11 dlv
15 0 dlv
dle
693 623 dlt
0 23 dlv
9 -23 dlv
8 23 dlv
0 -23 dlv
dle
734 631 dlt
-16 0 dlv
11 15 dlv
0 -23 dlv
dle
1275 827 dlt
-1 2 dlv
-2 2 dlv
-3 1 dlv
-4 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -3 dlv
0 -6 dlv
1 -3 dlv
1 -2 dlv
2 -3 dlv
2 -1 dlv
4 0 dlv
3 1 dlv
2 3 dlv
1 2 dlv
dle
0 -23 1283 832 dls
1102 809 dlt
0 23 dlv
10 0 dlv
3 -1 dlv
1 -1 dlv
2 -2 dlv
0 -2 dlv
-2 -2 dlv
-1 -2 dlv
-3 -1 dlv
-10 0 dlv
dle
8 -12 1110 821 dls
0 -23 1125 832 dls
460 782 dlt
22 9 dlv
-22 8 dlv
dle
15 0 467 817 dls
470 817 dlt
-2 -2 dlv
-1 -3 dlv
0 -3 dlv
1 -2 dlv
2 -2 dlv
4 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 3 dlv
-1 3 dlv
-2 2 dlv
dle
470 837 dlt
-2 -2 dlv
-1 -2 dlv
0 -3 dlv
1 -2 dlv
2 -3 dlv
4 -1 dlv
2 0 dlv
3 1 dlv
2 3 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 2 dlv
dle
693 1139 dlt
0 22 dlv
9 -22 dlv
8 22 dlv
0 -22 dlv
dle
720 1161 dlt
12 0 dlv
-6 -8 dlv
3 0 dlv
2 -1 dlv
1 -1 dlv
1 -4 dlv
0 -2 dlv
-1 -3 dlv
-2 -2 dlv
-3 -1 dlv
-4 0 dlv
-3 1 dlv
-1 1 dlv
-1 2 dlv
dle
344 1139 dlt
0 22 dlv
8 -22 dlv
9 22 dlv
0 -22 dlv
dle
372 1157 dlt
2 1 dlv
3 3 dlv
0 -22 dlv
dle
0 266 1500 1232 clwin
gfs
%%Trailer
%%EOF
