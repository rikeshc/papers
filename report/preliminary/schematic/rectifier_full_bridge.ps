%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 61 360 299
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 1496 1500 300 pap
%%Page: cds 1
gis
0 258 1496 1241 clwin
2 258 1494 1241 clwin
0 256 1496 1244 clwin
0 256 1496 1245 clwin
0 256 1496 1244 clwin
ssls
0 78 753 284 dls
727 284 dpb
779 284 dpv
753 258 dpv
dpu
39 0 179 492 dls
0 78 218 453 dls
0 78 231 453 dls
231 453 dlt
52 0 dlv
0 -39 dlv
dle
52 0 231 492 dls
231 531 dlt
52 0 dlv
0 40 dlv
dle
257 466 dlt
26 -13 dlv
-26 -13 dlv
dle
-39 0 857 492 dls
0 78 818 453 dls
0 78 805 453 dls
805 453 dlt
-52 0 dlv
0 -39 dlv
dle
-52 0 805 492 dls
805 531 dlt
-52 0 dlv
0 40 dlv
dle
779 466 dlt
-26 -13 dlv
26 -13 dlv
dle
1066 701 dlt
0 31 dlv
-26 8 dlv
52 16 dlv
-52 16 dlv
52 15 dlv
-52 16 dlv
52 16 dlv
-26 7 dlv
0 32 dlv
dle
0 84 1249 701 dls
0 58 1249 800 dls
1275 774 dlt
-13 8 dlv
-13 3 dlv
-13 -3 dlv
-13 -8 dlv
dle
52 0 1223 800 dls
516 719 dlt
-8 -2 dlv
-3 -8 dlv
3 -8 dlv
8 -2 dlv
dle
516 719 dlt
7 3 dlv
3 8 dlv
-3 8 dlv
-7 2 dlv
dle
-52 0 596 779 dls
-52 0 492 779 dls
-16 0 513 779 dls
0 15 505 772 dls
0 15 531 772 dls
544 779 dpb
542 792 dpv
534 803 dpv
523 808 dpv
513 808 dpv
503 803 dpv
495 792 dpv
492 779 dpv
495 766 dpv
503 756 dpv
513 751 dpv
523 751 dpv
534 756 dpv
542 766 dpv
dpu
-39 0 857 1066 dls
0 79 818 1027 dls
0 79 805 1027 dls
805 1027 dlt
-52 0 dlv
0 -39 dlv
dle
-52 0 805 1066 dls
805 1106 dlt
-52 0 dlv
0 39 dlv
dle
779 1040 dlt
-26 -13 dlv
26 -13 dlv
dle
39 0 179 1066 dls
0 79 218 1027 dls
0 79 231 1027 dls
231 1027 dlt
52 0 dlv
0 -39 dlv
dle
52 0 231 1066 dls
231 1106 dlt
52 0 dlv
0 39 dlv
dle
257 1040 dlt
26 -13 dlv
-26 -13 dlv
dle
0 130 127 936 dls
0 130 127 362 dls
52 0 127 1066 dls
52 0 127 492 dls
156 0 127 936 dls
156 0 127 362 dls
0 208 283 571 dls
0 157 283 779 dls
0 78 283 414 dls
0 78 283 988 dls
0 52 283 362 dls
0 52 283 1145 dls
0 52 283 936 dls
296 362 dpb
294 370 dpv
286 375 dpv
278 372 dpv
270 367 dpv
270 357 dpv
275 351 dpv
286 349 dpv
294 354 dpv
dps
296 936 dpb
294 944 dpv
286 949 dpv
278 946 dpv
270 941 dpv
270 931 dpv
275 926 dpv
286 923 dpv
294 928 dpv
dps
296 779 dpb
294 787 dpv
286 792 dpv
278 790 dpv
270 785 dpv
270 774 dpv
275 769 dpv
286 766 dpv
294 772 dpv
dps
157 0 283 779 dls
470 0 283 362 dls
470 0 283 1197 dls
157 0 596 779 dls
0 208 753 571 dls
0 157 753 779 dls
0 78 753 414 dls
0 78 753 988 dls
0 52 753 1145 dls
0 52 753 936 dls
0 52 753 362 dls
766 1197 dpb
763 1205 dpv
756 1210 dpv
748 1207 dpv
740 1202 dpv
740 1192 dpv
745 1186 dpv
756 1184 dpv
763 1189 dpv
dps
766 779 dpb
763 787 dpv
756 792 dpv
748 790 dpv
740 785 dpv
740 774 dpv
745 769 dpv
756 766 dpv
763 772 dpv
dps
766 936 dpb
763 944 dpv
756 949 dpv
748 946 dpv
740 941 dpv
740 931 dpv
745 926 dpv
756 923 dpv
763 928 dpv
dps
157 0 753 936 dls
157 0 753 362 dls
53 0 857 1066 dls
53 0 857 492 dls
0 130 910 362 dls
0 130 910 936 dls
923 362 dpb
920 370 dpv
912 375 dpv
904 372 dpv
897 367 dpv
897 357 dpv
902 351 dpv
912 349 dpv
920 354 dpv
dps
313 0 753 1197 dls
156 0 910 362 dls
0 339 1066 362 dls
0 339 1066 858 dls
1079 362 dpb
1077 370 dpv
1069 375 dpv
1061 372 dpv
1053 367 dpv
1053 357 dpv
1058 351 dpv
1069 349 dpv
1077 354 dpv
dps
1079 1197 dpb
1077 1205 dpv
1069 1210 dpv
1061 1207 dpv
1053 1202 dpv
1053 1192 dpv
1058 1186 dpv
1069 1184 dpv
1077 1189 dpv
dps
183 0 1066 1197 dls
183 0 1066 362 dls
0 339 1249 362 dls
0 339 1249 858 dls
633 824 dlt
10 -26 dlv
10 26 dlv
dle
5 0 657 824 dls
0 -26 659 824 dls
5 0 657 798 dls
669 798 dlt
0 26 dlv
17 -26 dlv
0 26 dlv
dle
696 818 dlt
0 1 dlv
2 2 dlv
1 2 dlv
2 1 dlv
5 0 dlv
3 -1 dlv
1 -2 dlv
1 -2 dlv
0 -3 dlv
-1 -2 dlv
-3 -4 dlv
-12 -12 dlv
17 0 dlv
dle
321 824 dlt
10 -26 dlv
10 26 dlv
dle
5 0 345 824 dls
0 -26 347 824 dls
5 0 345 798 dls
357 798 dlt
0 26 dlv
18 -26 dlv
0 26 dlv
dle
387 819 dlt
2 1 dlv
4 4 dlv
0 -26 dlv
dle
1095 1241 dlt
10 -26 dlv
10 26 dlv
dle
1121 1215 dlt
0 26 dlv
11 0 dlv
4 -1 dlv
1 -1 dlv
1 -3 dlv
0 -2 dlv
-1 -3 dlv
-1 -1 dlv
-4 -1 dlv
-11 0 dlv
dle
8 -14 1130 1229 dls
1163 1241 dlt
-16 0 dlv
0 -26 dlv
16 0 dlv
dle
10 0 1147 1229 dls
1188 1235 dlt
-1 3 dlv
-3 2 dlv
-2 1 dlv
-5 0 dlv
-3 -1 dlv
-2 -2 dlv
-1 -3 dlv
-2 -4 dlv
0 -6 dlv
2 -4 dlv
1 -2 dlv
2 -3 dlv
3 -1 dlv
5 0 dlv
2 1 dlv
3 3 dlv
1 2 dlv
dle
743 351 763 372 dbs
169 482 189 503 dbs
273 560 294 581 dbs
273 482 294 503 dbs
273 404 294 425 dbs
847 482 868 503 dbs
743 560 763 581 dbs
743 482 763 503 dbs
743 404 763 425 dbs
1056 712 dpb
1077 712 dpv
1077 691 dpv
1056 691 dpv
dps
1056 868 dpb
1077 868 dpv
1077 847 dpv
1056 847 dpv
dps
1238 712 dpb
1259 712 dpv
1259 691 dpv
1238 691 dpv
dps
1238 868 dpb
1259 868 dpv
1259 847 dpv
1238 847 dpv
dps
429 769 450 790 dbs
586 769 607 790 dbs
847 1056 868 1077 dbs
743 1134 763 1155 dbs
743 1056 763 1077 dbs
743 978 763 999 dbs
169 1056 189 1077 dbs
273 1134 294 1155 dbs
273 1056 294 1077 dbs
273 978 294 999 dbs
792 322 dlt
0 -14 dlv
-1 -3 dlv
-1 -1 dlv
-1 0 dlv
-3 0 dlv
-2 0 dlv
dle
792 319 dlt
-2 2 dlv
-1 1 dlv
-3 0 dlv
-2 -1 dlv
-1 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
3 0 dlv
1 1 dlv
2 1 dlv
dle
0 -12 799 322 dls
799 318 dlt
3 3 dlv
1 1 dlv
3 0 dlv
2 -1 dlv
1 -3 dlv
0 -8 dlv
dle
0 -18 825 328 dls
825 319 dlt
-2 2 dlv
-1 1 dlv
-3 0 dlv
-2 -1 dlv
-1 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
3 0 dlv
1 1 dlv
2 1 dlv
dle
313 584 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
337 600 dlt
0 1 dlv
1 2 dlv
1 1 dlv
2 1 dlv
4 0 dlv
2 -1 dlv
1 -1 dlv
1 -2 dlv
0 -2 dlv
-1 -2 dlv
-2 -3 dlv
-10 -10 dlv
14 0 dlv
dle
684 584 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
722 591 dlt
-15 0 dlv
10 14 dlv
0 -21 dlv
dle
1109 832 dlt
0 20 dlv
9 0 dlv
3 -1 dlv
1 -1 dlv
1 -2 dlv
0 -1 dlv
-1 -2 dlv
-1 -1 dlv
-3 -1 dlv
-9 0 dlv
dle
7 -11 1116 843 dls
0 -20 1130 852 dls
1293 847 dlt
-1 2 dlv
-2 2 dlv
-2 1 dlv
-4 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -2 dlv
-1 -2 dlv
0 -5 dlv
1 -3 dlv
1 -2 dlv
2 -2 dlv
2 -1 dlv
4 0 dlv
2 1 dlv
2 2 dlv
1 2 dlv
dle
0 -20 1300 852 dls
445 806 dlt
21 8 dlv
-21 8 dlv
dle
14 0 452 838 dls
455 838 dlt
-2 -2 dlv
-1 -2 dlv
0 -3 dlv
1 -2 dlv
2 -2 dlv
3 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 2 dlv
dle
455 857 dlt
-2 -2 dlv
-1 -2 dlv
0 -3 dlv
1 -2 dlv
2 -2 dlv
3 -1 dlv
2 0 dlv
3 1 dlv
2 2 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 2 dlv
dle
684 1158 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
709 1179 dlt
11 0 dlv
-6 -8 dlv
3 0 dlv
2 -1 dlv
1 -1 dlv
1 -3 dlv
0 -2 dlv
-1 -3 dlv
-2 -2 dlv
-3 -1 dlv
-3 0 dlv
-3 1 dlv
-1 1 dlv
-1 2 dlv
dle
313 1158 dlt
0 21 dlv
8 -21 dlv
8 21 dlv
0 -21 dlv
dle
339 1175 dlt
2 1 dlv
3 3 dlv
0 -21 dlv
dle
0 256 1496 1245 clwin
gfs
%%Trailer
%%EOF
