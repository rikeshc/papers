%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
172 132 4810 6330 600 pap
%%Page: cds 1
gis
rotp
0 917 6330 3891 clwin
0 917 6327 3892 clwin
0 917 6327 3892 clwin
0 917 6330 3892 clwin
0 917 6327 3892 clwin
ssls
0 800 400 slc
0 800 400 sfc
36 0 4447 1412 dls
4503 1412 20 dcu
0 -155 4524 1490 dls
0 155 4550 1335 dls
4638 1516 dlt
-52 -26 dlv
52 -26 dlv
dle
103 0 4550 1412 dls
4550 1490 dlt
103 0 dlv
0 77 dlv
dle
4550 1335 dlt
103 0 dlv
0 -78 dlv
dle
78 0 1244 1412 dls
0 -155 1322 1490 dls
0 155 1348 1335 dls
1348 1335 dlt
103 0 dlv
0 -78 dlv
dle
103 0 1348 1412 dls
1348 1490 dlt
103 0 dlv
0 77 dlv
dle
1399 1361 dlt
52 -26 dlv
-52 -26 dlv
dle
-77 0 3000 1412 dls
0 -155 2923 1490 dls
0 155 2897 1335 dls
2897 1335 dlt
-103 0 dlv
0 -78 dlv
dle
-103 0 2897 1412 dls
2897 1490 dlt
-103 0 dlv
0 77 dlv
dle
2845 1361 dlt
-51 -26 dlv
51 -26 dlv
dle
78 0 3620 1412 dls
0 -155 3698 1490 dls
0 155 3723 1335 dls
3723 1335 dlt
104 0 dlv
0 -78 dlv
dle
104 0 3723 1412 dls
3723 1490 dlt
104 0 dlv
0 77 dlv
dle
3775 1361 dlt
52 -26 dlv
-52 -26 dlv
dle
5479 1257 dlt
0 62 dlv
-51 16 dlv
103 31 dlv
-103 31 dlv
103 31 dlv
-103 31 dlv
103 31 dlv
-52 15 dlv
0 62 dlv
dle
78 0 1244 2135 dls
0 -155 1322 2213 dls
0 155 1348 2058 dls
1348 2058 dlt
103 0 dlv
0 -78 dlv
dle
103 0 1348 2135 dls
1348 2213 dlt
103 0 dlv
0 77 dlv
dle
1399 2084 dlt
52 -26 dlv
-52 -26 dlv
dle
-77 0 3000 2135 dls
0 -155 2923 2213 dls
0 155 2897 2058 dls
2897 2058 dlt
-103 0 dlv
0 -78 dlv
dle
-103 0 2897 2135 dls
2897 2213 dlt
-103 0 dlv
0 77 dlv
dle
2845 2084 dlt
-51 -26 dlv
51 -26 dlv
dle
78 0 3620 2135 dls
0 -155 3698 2213 dls
0 155 3723 2058 dls
3723 2058 dlt
104 0 dlv
0 -78 dlv
dle
104 0 3723 2135 dls
3723 2213 dlt
104 0 dlv
0 77 dlv
dle
3775 2084 dlt
52 -26 dlv
-52 -26 dlv
dle
5479 2084 dlt
0 62 dlv
-51 15 dlv
103 31 dlv
-103 31 dlv
103 31 dlv
-103 31 dlv
103 31 dlv
-52 16 dlv
0 62 dlv
dle
36 0 3620 2859 dls
3677 2858 21 20 delu
0 -155 3698 2936 dls
0 155 3723 2781 dls
3811 2962 dlt
-51 -26 dlv
51 -26 dlv
dle
104 0 3723 2859 dls
3723 2936 dlt
104 0 dlv
0 77 dlv
dle
3723 2781 dlt
104 0 dlv
0 -77 dlv
dle
-36 0 3000 2859 dls
2944 2859 20 dcu
0 -155 2923 2936 dls
0 155 2897 2781 dls
2809 2962 dlt
52 -26 dlv
-52 -26 dlv
dle
-103 0 2897 2859 dls
2897 2936 dlt
-103 0 dlv
0 77 dlv
dle
2897 2781 dlt
-103 0 dlv
0 -77 dlv
dle
77 0 728 2859 dls
0 -155 805 2936 dls
0 155 831 2781 dls
831 2781 dlt
103 0 dlv
0 -77 dlv
dle
103 0 831 2859 dls
831 2936 dlt
103 0 dlv
0 77 dlv
dle
883 2807 dlt
51 -26 dlv
-51 -26 dlv
dle
-78 0 2174 2859 dls
0 -155 2096 2936 dls
0 155 2071 2781 dls
2071 2781 dlt
-104 0 dlv
0 -77 dlv
dle
-104 0 2071 2859 dls
2071 2936 dlt
-104 0 dlv
0 77 dlv
dle
2019 2807 dlt
-52 -26 dlv
52 -26 dlv
dle
36 0 5273 3065 dls
5329 3065 20 21 delu
0 -155 5350 3143 dls
0 155 5376 2988 dls
5464 3168 dlt
-52 -25 dlv
52 -26 dlv
dle
103 0 5376 3065 dls
5376 3143 dlt
103 0 dlv
0 77 dlv
dle
5376 2988 dlt
103 0 dlv
0 -78 dlv
dle
36 0 4447 3582 dls
4503 3582 20 dcu
0 -155 4524 3659 dls
0 155 4550 3504 dls
4638 3685 dlt
-52 -26 dlv
52 -26 dlv
dle
103 0 4550 3582 dls
4550 3659 dlt
103 0 dlv
0 78 dlv
dle
4550 3504 dlt
103 0 dlv
0 -77 dlv
dle
36 0 3620 3582 dls
3677 3581 21 20 delu
0 -155 3698 3659 dls
0 155 3723 3504 dls
3811 3685 dlt
-51 -26 dlv
51 -26 dlv
dle
104 0 3723 3582 dls
3723 3659 dlt
104 0 dlv
0 78 dlv
dle
3723 3504 dlt
104 0 dlv
0 -77 dlv
dle
-36 0 3000 3582 dls
2944 3582 20 dcu
0 -155 2923 3659 dls
0 155 2897 3504 dls
2809 3685 dlt
52 -26 dlv
-52 -26 dlv
dle
-103 0 2897 3582 dls
2897 3659 dlt
-103 0 dlv
0 78 dlv
dle
2897 3504 dlt
-103 0 dlv
0 -77 dlv
dle
800 800 851 slc
800 800 851 sfc
0 1705 624 1154 dls
104 0 624 2859 dls
0 310 934 3013 dls
0 155 934 2704 dls
723 0 418 1877 dls
723 0 418 1671 dls
0 258 1141 1877 dls
0 259 1141 1412 dls
1141 1877 25 dcs
1141 1670 26 25 dels
103 0 1141 2135 dls
103 0 1141 1412 dls
1136 0 315 1051 dls
517 0 934 2704 dls
0 414 1451 2290 dls
0 413 1451 1567 dls
0 206 1451 1051 dls
0 155 1451 1980 dls
0 155 1451 1257 dls
1451 2703 26 25 dels
1451 1051 25 dcs
516 0 1451 2704 dls
0 155 1967 2704 dls
0 104 1967 3013 dls
1859 0 418 3220 dls
103 0 2174 2859 dls
0 361 2277 2859 dls
2324 0 470 3840 dls
1860 0 934 3323 dls
1343 0 1451 1051 dls
0 413 2794 1567 dls
0 310 2794 3013 dls
0 310 2794 2290 dls
0 206 2794 1051 dls
0 155 2794 3582 dls
0 154 2794 2859 dls
0 155 2794 1980 dls
0 155 2794 1257 dls
0 103 2794 3737 dls
0 104 2794 3323 dls
0 104 2794 2600 dls
2794 3323 26 25 dels
2794 2600 25 dcs
2794 1051 25 dcs
2794 3840 25 dcs
2066 0 1141 1877 dls
2066 0 1141 1671 dls
413 0 2794 2600 dls
207 0 3000 3582 dls
207 0 3000 2135 dls
207 0 3000 1412 dls
0 723 3207 2600 dls
0 259 3207 3323 dls
0 258 3207 1877 dls
0 259 3207 1412 dls
3207 3581 26 25 dels
3207 3323 26 25 dels
3207 2135 26 25 dels
3207 1412 26 25 dels
2996 0 418 2497 dls
414 0 3000 2859 dls
0 362 3414 2497 dls
3414 2859 25 dcs
413 0 3207 3582 dls
413 0 3207 2135 dls
413 0 3207 1412 dls
206 0 3414 2859 dls
1860 0 1967 3117 dls
1033 0 2794 3840 dls
1033 0 2794 1051 dls
0 413 3827 1567 dls
0 310 3827 3117 dls
0 207 3827 2497 dls
0 207 3827 2290 dls
0 206 3827 1051 dls
0 155 3827 3582 dls
0 154 3827 2859 dls
0 155 3827 1980 dls
0 155 3827 1257 dls
0 103 3827 3737 dls
0 104 3827 3013 dls
3827 3840 25 dcs
3827 3117 25 dcs
3827 2497 25 dcs
3827 1051 25 dcs
1136 0 3207 3323 dls
516 0 3827 2497 dls
0 1085 4343 1412 dls
0 259 4343 3323 dls
104 0 4343 3582 dls
104 0 4343 1412 dls
826 0 3827 3840 dls
826 0 3827 1051 dls
0 1498 4653 1567 dls
0 362 4653 3065 dls
0 206 4653 1051 dls
0 155 4653 3582 dls
0 155 4653 1412 dls
0 103 4653 3737 dls
4653 3840 25 dcs
4653 3065 25 dcs
4653 1051 25 dcs
4546 0 624 1154 dls
0 620 5170 1154 dls
620 0 4653 3065 dls
826 0 4653 3840 dls
826 0 4653 1051 dls
309 0 5170 1774 dls
0 620 5479 3220 dls
0 310 5479 2600 dls
0 310 5479 1774 dls
0 206 5479 2394 dls
0 206 5479 1051 dls
0 207 5479 1567 dls
0 155 5479 3065 dls
5479 2600 25 26 dels
5479 1774 25 26 dels
517 0 5479 2600 dls
800 800 851 slc
800 800 851 sfc
5588 2688 dlt
20 -52 dlv
19 52 dlv
dle
5639 2636 dlt
0 52 dlv
23 0 dlv
7 -2 dlv
2 -3 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-7 -3 dlv
-23 0 dlv
dle
17 -27 5657 2663 dls
5723 2688 dlt
-32 0 dlv
0 -52 dlv
32 0 dlv
dle
20 0 5691 2663 dls
5772 2676 dlt
-2 5 dlv
-5 5 dlv
-5 2 dlv
-10 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -5 dlv
-3 -8 dlv
0 -12 dlv
3 -7 dlv
2 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
5 3 dlv
5 5 dlv
2 5 dlv
0 7 dlv
-12 0 dlv
dle
4896 3153 dlt
19 -52 dlv
20 52 dlv
dle
4982 3141 dlt
-3 5 dlv
-5 4 dlv
-4 3 dlv
-10 0 dlv
-5 -3 dlv
-5 -4 dlv
-3 -5 dlv
-2 -8 dlv
0 -12 dlv
2 -7 dlv
3 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
4 3 dlv
5 5 dlv
3 5 dlv
0 7 dlv
-12 0 dlv
dle
39 0 4992 3096 dls
5048 3101 dlt
0 52 dlv
22 0 dlv
8 -3 dlv
2 -2 dlv
3 -5 dlv
0 -7 dlv
-3 -5 dlv
-2 -3 dlv
-8 -2 dlv
-22 0 dlv
dle
5092 3101 dlt
20 52 dlv
20 -52 dlv
dle
24 0 5100 3118 dls
5179 3146 dlt
-5 4 dlv
-8 3 dlv
-10 0 dlv
-7 -3 dlv
-5 -4 dlv
0 -5 dlv
3 -5 dlv
2 -3 dlv
5 -2 dlv
15 -5 dlv
5 -3 dlv
2 -2 dlv
3 -5 dlv
0 -7 dlv
-5 -5 dlv
-8 -3 dlv
-10 0 dlv
-7 3 dlv
-5 5 dlv
dle
5228 3146 dlt
-5 4 dlv
-8 3 dlv
-9 0 dlv
-8 -3 dlv
-5 -4 dlv
0 -5 dlv
3 -5 dlv
2 -3 dlv
5 -2 dlv
15 -5 dlv
5 -3 dlv
2 -2 dlv
3 -5 dlv
0 -7 dlv
-5 -5 dlv
-8 -3 dlv
-9 0 dlv
-8 3 dlv
-5 5 dlv
dle
5089 2017 dlt
20 -52 dlv
20 52 dlv
dle
5141 1965 dlt
0 52 dlv
17 0 dlv
8 -3 dlv
5 -5 dlv
2 -5 dlv
2 -7 dlv
0 -12 dlv
-2 -8 dlv
-2 -5 dlv
-5 -5 dlv
-8 -2 dlv
-17 0 dlv
dle
10 0 5188 2017 dls
0 -52 5193 2017 dls
10 0 5188 1965 dls
5205 2017 dlt
20 -52 dlv
19 52 dlv
dle
1000 0 0 slc
1000 0 0 sfc
470 1051 dpb
423 1004 dpv
361 1004 dpv
315 1051 dpv
361 1097 dpv
423 1097 dpv
dps
4426 1392 4467 1433 dbs
4632 1237 4674 1278 dbs
4632 1392 4674 1433 dbs
4632 1547 4674 1588 dbs
1224 1392 1265 1433 dbs
1430 1547 1472 1588 dbs
1430 1392 1472 1433 dbs
1430 1237 1472 1278 dbs
2980 1392 3021 1433 dbs
2773 1547 2814 1588 dbs
2773 1392 2814 1433 dbs
2773 1237 2814 1278 dbs
3599 1392 3641 1433 dbs
3806 1547 3847 1588 dbs
3806 1392 3847 1433 dbs
3806 1237 3847 1278 dbs
5459 1278 dpb
5500 1278 dpv
5500 1237 dpv
5459 1237 dpv
dps
5459 1588 dpb
5500 1588 dpv
5500 1547 dpv
5459 1547 dpv
dps
315 1624 dpb
315 1717 dpv
371 1717 dpv
418 1671 dpv
371 1624 dpv
dps
315 1831 dpb
315 1924 dpv
371 1924 dpv
418 1877 dpv
371 1831 dpv
dps
1224 2115 1265 2156 dbs
1430 2270 1472 2311 dbs
1430 2115 1472 2156 dbs
1430 1960 1472 2001 dbs
2980 2115 3021 2156 dbs
2773 2270 2814 2311 dbs
2773 2115 2814 2156 dbs
2773 1960 2814 2001 dbs
3599 2115 3641 2156 dbs
3806 2270 3847 2311 dbs
3806 2115 3847 2156 dbs
3806 1960 3847 2001 dbs
5459 2104 dpb
5500 2104 dpv
5500 2063 dpv
5459 2063 dpv
dps
5459 2414 dpb
5500 2414 dpv
5500 2373 dpv
5459 2373 dpv
dps
315 2450 dpb
315 2543 dpv
371 2543 dpv
418 2497 dpv
371 2450 dpv
dps
5996 2554 dpb
5996 2647 dpv
6053 2647 dpv
6099 2600 dpv
6053 2554 dpv
dps
3599 2838 3641 2879 dbs
3806 2683 3847 2724 dbs
3806 2838 3847 2879 dbs
3806 2993 3847 3034 dbs
2980 2838 3021 2879 dbs
2773 2683 2814 2724 dbs
2773 2838 2814 2879 dbs
2773 2993 2814 3034 dbs
707 2838 748 2879 dbs
914 2993 955 3034 dbs
914 2838 955 2879 dbs
914 2683 955 2724 dbs
2153 2838 2195 2879 dbs
1947 2993 1988 3034 dbs
1947 2838 1988 2879 dbs
1947 2683 1988 2724 dbs
315 3174 dpb
315 3267 dpv
371 3267 dpv
418 3220 dpv
371 3174 dpv
dps
5252 3044 5294 3086 dbs
5459 2890 5500 2931 dbs
5459 3044 5500 3086 dbs
5459 3199 5500 3241 dbs
4426 3561 4467 3602 dbs
4632 3406 4674 3447 dbs
4632 3561 4674 3602 dbs
4632 3716 4674 3757 dbs
3599 3561 3641 3602 dbs
3806 3406 3847 3447 dbs
3806 3561 3847 3602 dbs
3806 3716 3847 3757 dbs
2980 3561 3021 3602 dbs
2773 3406 2814 3447 dbs
2773 3561 2814 3602 dbs
2773 3716 2814 3757 dbs
470 3840 dpb
423 3793 dpv
361 3793 dpv
315 3840 dpv
361 3886 dpv
423 3886 dpv
dps
1000 0 0 slc
1000 0 0 sfc
173 1064 dlt
-3 5 dlv
-4 5 dlv
-5 3 dlv
-10 0 dlv
-5 -3 dlv
-5 -5 dlv
-3 -5 dlv
-2 -7 dlv
0 -12 dlv
2 -8 dlv
3 -5 dlv
5 -5 dlv
5 -2 dlv
10 0 dlv
5 2 dlv
4 5 dlv
3 5 dlv
0 8 dlv
-12 0 dlv
dle
190 1025 dlt
0 52 dlv
35 -52 dlv
0 52 dlv
dle
244 1025 dlt
0 52 dlv
17 0 dlv
8 -3 dlv
5 -5 dlv
2 -5 dlv
3 -7 dlv
0 -12 dlv
-3 -8 dlv
-2 -5 dlv
-5 -5 dlv
-8 -2 dlv
-17 0 dlv
dle
2 1696 dlt
20 -51 dlv
19 51 dlv
dle
54 1672 dlt
22 0 dlv
7 -3 dlv
3 -2 dlv
2 -5 dlv
0 -7 dlv
-2 -5 dlv
-3 -3 dlv
-7 -2 dlv
-22 0 dlv
0 51 dlv
22 0 dlv
7 -2 dlv
3 -3 dlv
2 -4 dlv
0 -5 dlv
-2 -5 dlv
-3 -3 dlv
-7 -2 dlv
dle
10 0 100 1696 dls
0 -51 105 1696 dls
10 0 100 1645 dls
118 1645 dlt
19 51 dlv
20 -51 dlv
dle
25 0 125 1662 dls
204 1689 dlt
-5 5 dlv
-8 2 dlv
-9 0 dlv
-8 -2 dlv
-5 -5 dlv
0 -5 dlv
3 -5 dlv
2 -2 dlv
5 -3 dlv
15 -5 dlv
5 -2 dlv
2 -3 dlv
3 -4 dlv
0 -8 dlv
-5 -5 dlv
-8 -2 dlv
-9 0 dlv
-8 2 dlv
-5 5 dlv
dle
255 1662 dlt
-37 0 dlv
25 34 dlv
0 -51 dlv
dle
2 1903 dlt
20 -52 dlv
19 52 dlv
dle
54 1878 dlt
22 0 dlv
7 -2 dlv
3 -3 dlv
2 -4 dlv
0 -8 dlv
-2 -5 dlv
-3 -2 dlv
-7 -3 dlv
-22 0 dlv
0 52 dlv
22 0 dlv
7 -2 dlv
3 -3 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-3 -2 dlv
-7 -3 dlv
dle
10 0 100 1903 dls
0 -52 105 1903 dls
10 0 100 1851 dls
118 1851 dlt
19 52 dlv
20 -52 dlv
dle
25 0 125 1869 dls
204 1896 dlt
-5 5 dlv
-8 2 dlv
-9 0 dlv
-8 -2 dlv
-5 -5 dlv
0 -5 dlv
3 -5 dlv
2 -3 dlv
5 -2 dlv
15 -5 dlv
5 -3 dlv
2 -2 dlv
3 -5 dlv
0 -7 dlv
-5 -5 dlv
-8 -3 dlv
-9 0 dlv
-8 3 dlv
-5 5 dlv
dle
223 1903 dlt
27 0 dlv
-14 -20 dlv
7 0 dlv
5 -2 dlv
2 -3 dlv
3 -7 dlv
0 -5 dlv
-3 -7 dlv
-5 -5 dlv
-7 -3 dlv
-7 0 dlv
-8 3 dlv
-2 2 dlv
-3 5 dlv
dle
2 2523 dlt
20 -52 dlv
19 52 dlv
dle
54 2498 dlt
22 0 dlv
7 -2 dlv
3 -3 dlv
2 -5 dlv
0 -7 dlv
-2 -5 dlv
-3 -2 dlv
-7 -3 dlv
-22 0 dlv
0 52 dlv
22 0 dlv
7 -3 dlv
3 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-3 -2 dlv
-7 -3 dlv
dle
10 0 100 2523 dls
0 -52 105 2523 dls
10 0 100 2471 dls
118 2471 dlt
19 52 dlv
20 -52 dlv
dle
25 0 125 2488 dls
204 2515 dlt
-5 5 dlv
-8 3 dlv
-9 0 dlv
-8 -3 dlv
-5 -5 dlv
0 -5 dlv
3 -4 dlv
2 -3 dlv
5 -2 dlv
15 -5 dlv
5 -3 dlv
2 -2 dlv
3 -5 dlv
0 -7 dlv
-5 -5 dlv
-8 -3 dlv
-9 0 dlv
-8 3 dlv
-5 5 dlv
dle
221 2510 dlt
0 3 dlv
2 5 dlv
3 2 dlv
5 3 dlv
10 0 dlv
4 -3 dlv
3 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-5 -7 dlv
-25 -25 dlv
35 0 dlv
dle
6128 2626 dlt
19 -52 dlv
20 52 dlv
dle
6179 2574 dlt
0 52 dlv
22 0 dlv
8 -2 dlv
2 -3 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-8 -3 dlv
-22 0 dlv
dle
18 -27 6196 2601 dls
6263 2626 dlt
-32 0 dlv
0 -52 dlv
32 0 dlv
dle
20 0 6231 2601 dls
6312 2614 dlt
-2 5 dlv
-5 5 dlv
-5 2 dlv
-10 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -5 dlv
-3 -8 dlv
0 -12 dlv
3 -7 dlv
2 -5 dlv
5 -5 dlv
5 -3 dlv
10 0 dlv
5 3 dlv
5 5 dlv
2 5 dlv
0 7 dlv
-12 0 dlv
dle
74 3246 dlt
20 -52 dlv
20 52 dlv
dle
126 3194 dlt
0 52 dlv
22 0 dlv
7 -3 dlv
3 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-3 -2 dlv
-7 -3 dlv
-22 0 dlv
dle
17 -27 143 3221 dls
210 3246 dlt
-32 0 dlv
0 -52 dlv
32 0 dlv
dle
19 0 178 3221 dls
224 3194 dlt
0 52 dlv
32 0 dlv
dle
20 0 224 3221 dls
90 3866 dlt
19 -52 dlv
20 52 dlv
dle
141 3814 dlt
0 52 dlv
23 0 dlv
7 -3 dlv
2 -2 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-7 -3 dlv
-23 0 dlv
dle
17 -27 159 3841 dls
225 3866 dlt
-32 0 dlv
0 -52 dlv
32 0 dlv
dle
20 0 193 3841 dls
274 3853 dlt
-2 5 dlv
-5 5 dlv
-5 3 dlv
-10 0 dlv
-5 -3 dlv
-5 -5 dlv
-2 -5 dlv
-3 -7 dlv
0 -12 dlv
3 -8 dlv
2 -5 dlv
5 -5 dlv
5 -2 dlv
10 0 dlv
5 2 dlv
5 5 dlv
2 5 dlv
dle
1000 0 0 slc
1000 0 0 sfc
4707 1588 dlt
0 41 dlv
16 -41 dlv
16 41 dlv
0 -41 dlv
dle
4759 1621 dlt
4 2 dlv
5 6 dlv
0 -41 dlv
dle
4816 1602 dlt
-30 0 dlv
20 27 dlv
0 -41 dlv
dle
1510 1593 dlt
0 41 dlv
16 -41 dlv
16 41 dlv
0 -41 dlv
dle
1562 1627 dlt
3 2 dlv
6 5 dlv
0 -41 dlv
dle
1601 1634 dlt
-6 -2 dlv
-4 -5 dlv
-2 -10 dlv
0 -6 dlv
2 -10 dlv
4 -6 dlv
6 -2 dlv
4 0 dlv
6 2 dlv
4 6 dlv
2 10 dlv
0 6 dlv
-2 10 dlv
-4 5 dlv
-6 2 dlv
-4 0 dlv
dle
-28 -41 1617 1634 dls
2657 1593 dlt
0 41 dlv
16 -41 dlv
15 41 dlv
0 -41 dlv
dle
2702 1634 dlt
28 0 dlv
-20 -41 dlv
dle
3886 1593 dlt
0 41 dlv
16 -41 dlv
16 41 dlv
0 -41 dlv
dle
3955 1634 dlt
-20 0 dlv
-2 -17 dlv
2 2 dlv
6 2 dlv
6 0 dlv
6 -2 dlv
4 -4 dlv
2 -6 dlv
0 -4 dlv
-2 -6 dlv
-4 -4 dlv
-6 -2 dlv
-6 0 dlv
-6 2 dlv
-2 2 dlv
-2 4 dlv
dle
5560 1593 dlt
0 41 dlv
17 0 dlv
6 -2 dlv
2 -2 dlv
2 -3 dlv
0 -4 dlv
-2 -4 dlv
-2 -2 dlv
-6 -2 dlv
-17 0 dlv
dle
14 -22 5573 1615 dls
5601 1625 dlt
0 2 dlv
2 3 dlv
2 2 dlv
4 2 dlv
8 0 dlv
4 -2 dlv
2 -2 dlv
2 -3 dlv
0 -4 dlv
-2 -4 dlv
-4 -6 dlv
-20 -20 dlv
28 0 dlv
dle
1510 2316 dlt
0 42 dlv
16 -42 dlv
16 42 dlv
0 -42 dlv
dle
1562 2350 dlt
3 2 dlv
6 6 dlv
0 -42 dlv
dle
1595 2350 dlt
4 2 dlv
6 6 dlv
0 -42 dlv
dle
2657 2316 dlt
0 42 dlv
16 -42 dlv
15 42 dlv
0 -42 dlv
dle
2728 2352 dlt
-2 4 dlv
-6 2 dlv
-4 0 dlv
-6 -2 dlv
-4 -6 dlv
-2 -10 dlv
0 -10 dlv
2 -8 dlv
4 -4 dlv
6 -2 dlv
2 0 dlv
6 2 dlv
4 4 dlv
2 6 dlv
0 2 dlv
-2 6 dlv
-4 4 dlv
-6 2 dlv
-2 0 dlv
-6 -2 dlv
-4 -4 dlv
-2 -6 dlv
dle
3886 2316 dlt
0 42 dlv
16 -42 dlv
16 42 dlv
0 -42 dlv
dle
3961 2330 dlt
-30 0 dlv
20 28 dlv
0 -42 dlv
dle
5560 2419 dlt
0 42 dlv
17 0 dlv
6 -2 dlv
2 -2 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-2 -2 dlv
-6 -2 dlv
-17 0 dlv
dle
14 -22 5573 2441 dls
5605 2453 dlt
4 2 dlv
6 6 dlv
0 -42 dlv
dle
3881 3034 dlt
0 41 dlv
16 -41 dlv
16 41 dlv
0 -41 dlv
dle
3932 3068 dlt
4 2 dlv
6 5 dlv
0 -41 dlv
dle
2662 3034 dlt
0 41 dlv
16 -41 dlv
16 41 dlv
0 -41 dlv
dle
2711 3075 dlt
22 0 dlv
-12 -15 dlv
6 0 dlv
4 -2 dlv
2 -2 dlv
2 -6 dlv
0 -4 dlv
-2 -6 dlv
-4 -4 dlv
-6 -2 dlv
-6 0 dlv
-6 2 dlv
-2 2 dlv
-2 4 dlv
dle
994 3039 dlt
0 42 dlv
16 -42 dlv
15 42 dlv
0 -42 dlv
dle
1065 3067 dlt
-2 -6 dlv
-4 -4 dlv
-6 -2 dlv
-2 0 dlv
-6 2 dlv
-4 4 dlv
-2 6 dlv
0 2 dlv
2 6 dlv
4 4 dlv
6 2 dlv
2 0 dlv
6 -2 dlv
4 -4 dlv
2 -8 dlv
0 -10 dlv
-2 -10 dlv
-4 -6 dlv
-6 -2 dlv
-4 0 dlv
-6 2 dlv
-2 4 dlv
dle
1831 3039 dlt
0 42 dlv
15 -42 dlv
16 42 dlv
0 -42 dlv
dle
1886 3081 dlt
-6 -2 dlv
-2 -4 dlv
0 -4 dlv
2 -4 dlv
4 -2 dlv
8 -2 dlv
5 -2 dlv
4 -4 dlv
2 -4 dlv
0 -6 dlv
-2 -4 dlv
-2 -2 dlv
-5 -2 dlv
-8 0 dlv
-6 2 dlv
-2 2 dlv
-2 4 dlv
0 6 dlv
2 4 dlv
4 4 dlv
6 2 dlv
8 2 dlv
3 2 dlv
2 4 dlv
0 4 dlv
-2 4 dlv
-5 2 dlv
-8 0 dlv
dle
5534 3241 dlt
0 41 dlv
16 -41 dlv
15 41 dlv
0 -41 dlv
dle
5585 3274 dlt
4 2 dlv
6 6 dlv
0 -41 dlv
dle
5615 3272 dlt
0 2 dlv
1 4 dlv
2 2 dlv
4 2 dlv
8 0 dlv
4 -2 dlv
2 -2 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-4 -6 dlv
-19 -19 dlv
27 0 dlv
dle
4707 3757 dlt
0 42 dlv
16 -42 dlv
16 42 dlv
0 -42 dlv
dle
4759 3791 dlt
4 2 dlv
5 6 dlv
0 -42 dlv
dle
4790 3799 dlt
22 0 dlv
-12 -16 dlv
6 0 dlv
4 -2 dlv
2 -2 dlv
2 -6 dlv
0 -4 dlv
-2 -6 dlv
-4 -4 dlv
-6 -2 dlv
-6 0 dlv
-6 2 dlv
-2 2 dlv
-2 4 dlv
dle
3881 3757 dlt
0 42 dlv
16 -42 dlv
16 42 dlv
0 -42 dlv
dle
3938 3799 dlt
-6 -2 dlv
-4 -6 dlv
-2 -10 dlv
0 -6 dlv
2 -10 dlv
4 -6 dlv
6 -2 dlv
4 0 dlv
6 2 dlv
4 6 dlv
2 10 dlv
0 6 dlv
-2 10 dlv
-4 6 dlv
-6 2 dlv
-4 0 dlv
dle
-28 -42 3954 3799 dls
2662 3757 dlt
0 42 dlv
16 -42 dlv
16 42 dlv
0 -42 dlv
dle
2709 3789 dlt
0 2 dlv
2 4 dlv
2 2 dlv
4 2 dlv
8 0 dlv
4 -2 dlv
2 -2 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-4 -6 dlv
-20 -20 dlv
28 0 dlv
dle
0 800 400 slc
0 800 400 sfc
470 1051 dpb
423 1097 dpv
361 1097 dpv
315 1051 dpv
361 1004 dpv
423 1004 dpv
dpu
315 1624 dpb
315 1717 dpv
371 1717 dpv
418 1671 dpv
371 1624 dpv
dpu
315 1831 dpb
315 1924 dpv
371 1924 dpv
418 1877 dpv
371 1831 dpv
dpu
315 2450 dpb
315 2543 dpv
371 2543 dpv
418 2497 dpv
371 2450 dpv
dpu
5996 2554 dpb
5996 2647 dpv
6053 2647 dpv
6099 2600 dpv
6053 2554 dpv
dpu
315 3174 dpb
315 3267 dpv
371 3267 dpv
418 3220 dpv
371 3174 dpv
dpu
470 3840 dpb
423 3886 dpv
361 3886 dpv
315 3840 dpv
361 3793 dpv
423 3793 dpv
dpu
0 917 6330 3892 clwin
gfs
%%Trailer
%%EOF
