%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
172 132 4810 6330 600 pap
%%Page: cds 1
gis
rotp
0 1062 6320 3747 clwin
0 1062 6322 3744 clwin
0 1062 6322 3744 clwin
0 1062 6322 3747 clwin
0 1062 6322 3744 clwin
ssls
851 800 0 slc
851 800 0 sfc
4385 1993 dlt
0 66 dlv
29 0 dlv
9 -3 dlv
3 -3 dlv
3 -7 dlv
0 -6 dlv
-3 -6 dlv
-3 -3 dlv
-9 -3 dlv
-29 0 dlv
dle
22 -35 4407 2028 dls
4495 2043 dlt
-3 7 dlv
-6 6 dlv
-6 3 dlv
-13 0 dlv
-6 -3 dlv
-6 -6 dlv
-4 -7 dlv
-3 -9 dlv
0 -16 dlv
3 -9 dlv
4 -7 dlv
6 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
3 7 dlv
dle
4561 2043 dlt
-3 7 dlv
-6 6 dlv
-6 3 dlv
-13 0 dlv
-6 -3 dlv
-6 -6 dlv
-4 -7 dlv
-3 -9 dlv
0 -16 dlv
3 -9 dlv
4 -7 dlv
6 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
3 7 dlv
dle
1749 1993 dlt
0 66 dlv
29 0 dlv
9 -3 dlv
3 -3 dlv
4 -7 dlv
0 -6 dlv
-4 -6 dlv
-3 -3 dlv
-9 -3 dlv
-29 0 dlv
dle
23 -35 1771 2028 dls
1860 2043 dlt
-4 7 dlv
-6 6 dlv
-6 3 dlv
-13 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -7 dlv
-4 -9 dlv
0 -16 dlv
4 -9 dlv
3 -7 dlv
6 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
4 7 dlv
dle
1926 2043 dlt
-4 7 dlv
-6 6 dlv
-6 3 dlv
-13 0 dlv
-6 -3 dlv
-6 -6 dlv
-3 -7 dlv
-4 -9 dlv
0 -16 dlv
4 -9 dlv
3 -7 dlv
6 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
4 7 dlv
dle
0 800 400 slc
0 800 400 sfc
99 0 2398 1762 dls
0 -198 2497 1861 dls
0 198 2530 1663 dls
2530 1663 dlt
132 0 dlv
0 -99 dlv
dle
132 0 2530 1762 dls
2530 1861 dlt
132 0 dlv
0 99 dlv
dle
2596 1696 dlt
66 -33 dlv
-66 -33 dlv
dle
-99 0 3917 1762 dls
0 -198 3818 1861 dls
0 198 3785 1663 dls
3785 1663 dlt
-132 0 dlv
0 -99 dlv
dle
-132 0 3785 1762 dls
3785 1861 dlt
-132 0 dlv
0 99 dlv
dle
3719 1696 dlt
-66 -33 dlv
66 -33 dlv
dle
-264 0 5502 1564 dls
-264 0 5502 1696 dls
264 0 4181 1762 dls
-264 0 5502 1828 dls
-264 0 5502 1960 dls
5238 2092 dlt
0 -661 dlv
-264 0 dlv
-529 331 dlv
529 330 dlv
264 0 dlv
dle
0 -661 4974 2092 dls
264 0 812 1564 dls
264 0 812 1696 dls
-264 0 2133 1762 dls
264 0 812 1828 dls
264 0 812 1960 dls
1076 2092 dlt
0 -661 dlv
265 0 dlv
528 331 dlv
-528 330 dlv
-265 0 dlv
dle
0 -661 1341 2092 dls
-46 0 3917 3347 dls
3844 3347 26 dcu
0 -198 3818 3446 dls
0 198 3785 3248 dls
3672 3479 dlt
67 -33 dlv
-67 -33 dlv
dle
-132 0 3785 3347 dls
3785 3446 dlt
-132 0 dlv
0 99 dlv
dle
3785 3248 dlt
-132 0 dlv
0 -99 dlv
dle
46 0 2398 3347 dls
2470 3347 26 dcu
0 -198 2497 3446 dls
0 198 2530 3248 dls
2642 3479 dlt
-66 -33 dlv
66 -33 dlv
dle
132 0 2530 3347 dls
2530 3446 dlt
132 0 dlv
0 99 dlv
dle
2530 3248 dlt
132 0 dlv
0 -99 dlv
dle
0 800 400 slc
0 800 400 sfc
0 -44 4742 1784 dls
4742 1765 dlt
3 9 dlv
6 7 dlv
7 3 dlv
9 0 dlv
dle
4818 1774 dlt
-7 7 dlv
-6 3 dlv
-9 0 dlv
-7 -3 dlv
-6 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
7 -3 dlv
9 0 dlv
6 3 dlv
7 6 dlv
dle
4874 1774 dlt
-6 7 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -7 dlv
-4 -9 dlv
0 -6 dlv
4 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
0 -44 1439 1784 dls
1439 1765 dlt
3 9 dlv
6 7 dlv
7 3 dlv
9 0 dlv
dle
1514 1774 dlt
-6 7 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -7 dlv
-3 -9 dlv
0 -6 dlv
3 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
1571 1774 dlt
-6 7 dlv
-6 3 dlv
-10 0 dlv
-6 -3 dlv
-6 -7 dlv
-4 -9 dlv
0 -6 dlv
4 -10 dlv
6 -6 dlv
6 -3 dlv
10 0 dlv
6 3 dlv
6 6 dlv
dle
800 800 851 slc
800 800 851 sfc
396 0 284 1233 dls
0 1982 680 1696 dls
0 331 680 1233 dls
680 1233 33 dcs
330 0 416 2422 dls
0 594 746 1828 dls
746 2422 33 dcs
132 0 680 1564 dls
132 0 680 1696 dls
66 0 746 1828 dls
0 330 812 1960 dls
1057 0 416 2951 dls
0 396 1473 2951 dls
1473 2951 33 dcs
1586 0 812 2290 dls
925 0 1473 2951 dls
925 0 1473 3347 dls
265 0 2133 1762 dls
0 661 2398 2290 dls
2398 2290 33 dcs
1982 0 680 1233 dls
1982 0 680 3678 dls
1916 0 746 2422 dls
264 0 2398 2290 dls
0 727 2662 2422 dls
0 331 2662 1233 dls
0 330 2662 1960 dls
0 198 2662 3347 dls
0 198 2662 1564 dls
0 133 2662 3545 dls
2662 3678 33 dcs
2662 1233 33 dcs
991 0 2662 3678 dls
991 0 2662 1233 dls
0 462 3653 1960 dls
0 331 3653 1233 dls
0 198 3653 3347 dls
0 198 3653 1564 dls
0 198 3653 2951 dls
0 133 3653 3545 dls
3653 3678 33 dcs
3653 1233 33 dcs
264 0 3917 1762 dls
1123 0 3653 2422 dls
859 0 3917 3347 dls
0 925 4776 2422 dls
4776 2422 33 dcs
726 0 4776 2422 dls
0 462 5502 1960 dls
5502 2422 33 dcs
1915 0 3653 2951 dls
66 0 5502 1828 dls
0 1123 5568 1828 dls
5568 2951 33 dcs
1981 0 3653 3678 dls
1981 0 3653 1233 dls
132 0 5502 1564 dls
132 0 5502 1696 dls
0 1982 5634 1696 dls
0 331 5634 1233 dls
5634 3678 33 dcs
397 0 5502 2422 dls
331 0 5568 2951 dls
265 0 5634 3678 dls
1000 0 0 slc
1000 0 0 sfc
482 1233 dpb
422 1174 dpv
343 1174 dpv
284 1233 dpv
343 1293 dpv
422 1293 dpv
dps
2371 1735 2424 1788 dbs
2635 1934 2688 1986 dbs
2635 1735 2688 1788 dbs
2635 1537 2688 1590 dbs
3890 1735 3943 1788 dbs
3626 1934 3679 1986 dbs
3626 1735 3679 1788 dbs
3626 1537 3679 1590 dbs
5476 1537 5529 1590 dbs
5476 1934 5529 1986 dbs
5476 1801 5529 1854 dbs
5476 1669 5529 1722 dbs
4155 1735 4208 1788 dbs
786 1537 838 1590 dbs
786 1934 838 1986 dbs
786 1801 838 1854 dbs
786 1669 838 1722 dbs
2107 1735 2160 1788 dbs
284 2363 dpb
284 2482 dpv
356 2482 dpv
416 2422 dpv
356 2363 dpv
dps
6031 2482 dpb
6031 2363 dpv
5958 2363 dpv
5899 2422 dpv
5958 2482 dpv
dps
284 2891 dpb
284 3010 dpv
356 3010 dpv
416 2951 dpv
356 2891 dpv
dps
6031 3010 dpb
6031 2891 dpv
5958 2891 dpv
5899 2951 dpv
5958 3010 dpv
dps
3890 3321 3943 3374 dbs
3626 3123 3679 3175 dbs
3626 3321 3679 3374 dbs
3626 3519 3679 3572 dbs
2371 3321 2424 3374 dbs
2635 3123 2688 3175 dbs
2635 3321 2688 3374 dbs
2635 3519 2688 3572 dbs
5899 3618 dpb
5899 3737 dpv
5971 3737 dpv
6031 3678 dpv
5971 3618 dpv
dps
1000 0 0 slc
1000 0 0 sfc
102 1251 dlt
-3 6 dlv
-6 6 dlv
-6 3 dlv
-13 0 dlv
-6 -3 dlv
-7 -6 dlv
-3 -6 dlv
-3 -10 dlv
0 -16 dlv
3 -9 dlv
3 -6 dlv
7 -7 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 7 dlv
3 6 dlv
0 9 dlv
-15 0 dlv
dle
124 1200 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
194 1200 dlt
0 66 dlv
22 0 dlv
9 -3 dlv
6 -6 dlv
3 -6 dlv
4 -10 dlv
0 -16 dlv
-4 -9 dlv
-3 -6 dlv
-6 -7 dlv
-9 -3 dlv
-22 0 dlv
dle
6100 2455 dlt
25 -66 dlv
25 66 dlv
dle
12 0 6160 2455 dls
0 -66 6166 2455 dls
12 0 6160 2389 dls
6191 2389 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
6260 2440 dlt
0 3 dlv
4 6 dlv
3 3 dlv
6 3 dlv
13 0 dlv
6 -3 dlv
3 -3 dlv
3 -6 dlv
0 -6 dlv
-3 -7 dlv
-6 -9 dlv
-32 -32 dlv
44 0 dlv
dle
3 2455 dlt
25 -66 dlv
25 66 dlv
dle
13 0 62 2455 dls
0 -66 69 2455 dls
13 0 62 2389 dls
94 2389 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
163 2440 dlt
0 3 dlv
3 6 dlv
3 3 dlv
7 3 dlv
12 0 dlv
7 -3 dlv
3 -3 dlv
3 -6 dlv
0 -6 dlv
-3 -7 dlv
-7 -9 dlv
-31 -32 dlv
44 0 dlv
dle
6100 2984 dlt
25 -66 dlv
25 66 dlv
dle
12 0 6160 2984 dls
0 -66 6166 2984 dls
12 0 6160 2918 dls
6191 2918 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
6267 2971 dlt
6 3 dlv
9 10 dlv
0 -66 dlv
dle
9 2984 dlt
25 -66 dlv
26 66 dlv
dle
13 0 69 2984 dls
0 -66 75 2984 dls
13 0 69 2918 dls
100 2918 dlt
0 66 dlv
45 -66 dlv
0 66 dlv
dle
176 2971 dlt
6 3 dlv
10 10 dlv
0 -66 dlv
dle
6067 3711 dlt
25 -67 dlv
25 67 dlv
dle
6133 3644 dlt
0 67 dlv
28 0 dlv
10 -4 dlv
3 -3 dlv
3 -6 dlv
0 -6 dlv
-3 -7 dlv
-3 -3 dlv
-10 -3 dlv
-28 0 dlv
dle
22 -35 6155 3679 dls
6240 3711 dlt
-41 0 dlv
0 -67 dlv
41 0 dlv
dle
25 0 6199 3679 dls
6303 3695 dlt
-3 6 dlv
-6 6 dlv
-7 4 dlv
-12 0 dlv
-7 -4 dlv
-6 -6 dlv
-3 -6 dlv
-3 -10 dlv
0 -15 dlv
3 -10 dlv
3 -6 dlv
6 -6 dlv
7 -4 dlv
12 0 dlv
7 4 dlv
6 6 dlv
3 6 dlv
dle
5050 1581 dlt
-3 6 dlv
-6 6 dlv
-6 4 dlv
-13 0 dlv
-6 -4 dlv
-7 -6 dlv
-3 -6 dlv
-3 -10 dlv
0 -15 dlv
3 -10 dlv
3 -6 dlv
7 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
3 6 dlv
0 10 dlv
-15 0 dlv
dle
5072 1531 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
5142 1531 dlt
0 66 dlv
22 0 dlv
9 -4 dlv
6 -6 dlv
3 -6 dlv
4 -10 dlv
0 -15 dlv
-4 -10 dlv
-3 -6 dlv
-6 -6 dlv
-9 -3 dlv
-22 0 dlv
dle
4944 1729 dlt
25 -66 dlv
25 66 dlv
dle
5010 1663 dlt
0 66 dlv
28 0 dlv
10 -3 dlv
3 -4 dlv
3 -6 dlv
0 -6 dlv
-3 -6 dlv
-3 -4 dlv
-10 -3 dlv
-28 0 dlv
dle
22 -34 5032 1697 dls
5117 1729 dlt
-41 0 dlv
0 -66 dlv
41 0 dlv
dle
25 0 5076 1697 dls
5180 1713 dlt
-3 6 dlv
-7 7 dlv
-6 3 dlv
-12 0 dlv
-7 -3 dlv
-6 -7 dlv
-3 -6 dlv
-3 -9 dlv
0 -16 dlv
3 -10 dlv
3 -6 dlv
6 -6 dlv
7 -3 dlv
12 0 dlv
6 3 dlv
7 6 dlv
3 6 dlv
dle
4488 1795 dlt
25 -66 dlv
25 66 dlv
dle
4570 1795 dlt
-6 -3 dlv
-7 -7 dlv
-3 -6 dlv
-3 -9 dlv
0 -16 dlv
3 -10 dlv
3 -6 dlv
7 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
3 6 dlv
3 10 dlv
0 16 dlv
-3 9 dlv
-3 6 dlv
-6 7 dlv
-6 3 dlv
-13 0 dlv
dle
4623 1729 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
4984 1861 dlt
25 -66 dlv
25 66 dlv
dle
13 0 5043 1861 dls
0 -66 5050 1861 dls
13 0 5043 1795 dls
5075 1795 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
5144 1845 dlt
0 3 dlv
3 7 dlv
3 3 dlv
7 3 dlv
12 0 dlv
7 -3 dlv
3 -3 dlv
3 -7 dlv
0 -6 dlv
-3 -6 dlv
-7 -10 dlv
-31 -31 dlv
44 0 dlv
dle
4990 1993 dlt
25 -66 dlv
26 66 dlv
dle
13 0 5050 1993 dls
0 -66 5056 1993 dls
13 0 5050 1927 dls
5081 1927 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
5157 1980 dlt
6 4 dlv
10 9 dlv
0 -66 dlv
dle
1173 1581 dlt
-4 6 dlv
-6 6 dlv
-6 4 dlv
-13 0 dlv
-6 -4 dlv
-6 -6 dlv
-3 -6 dlv
-4 -10 dlv
0 -15 dlv
4 -10 dlv
3 -6 dlv
6 -6 dlv
6 -3 dlv
13 0 dlv
6 3 dlv
6 6 dlv
4 6 dlv
0 10 dlv
-16 0 dlv
dle
1195 1531 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
1264 1531 dlt
0 66 dlv
22 0 dlv
9 -4 dlv
7 -6 dlv
3 -6 dlv
3 -10 dlv
0 -15 dlv
-3 -10 dlv
-3 -6 dlv
-7 -6 dlv
-9 -3 dlv
-22 0 dlv
dle
1119 1729 dlt
25 -66 dlv
25 66 dlv
dle
1185 1663 dlt
0 66 dlv
28 0 dlv
10 -3 dlv
3 -4 dlv
3 -6 dlv
0 -6 dlv
-3 -6 dlv
-3 -4 dlv
-10 -3 dlv
-28 0 dlv
dle
22 -34 1207 1697 dls
1292 1729 dlt
-41 0 dlv
0 -66 dlv
41 0 dlv
dle
25 0 1251 1697 dls
1355 1713 dlt
-3 6 dlv
-6 7 dlv
-7 3 dlv
-12 0 dlv
-7 -3 dlv
-6 -7 dlv
-3 -6 dlv
-3 -9 dlv
0 -16 dlv
3 -10 dlv
3 -6 dlv
6 -6 dlv
7 -3 dlv
12 0 dlv
7 3 dlv
6 6 dlv
3 6 dlv
dle
1628 1795 dlt
25 -66 dlv
25 66 dlv
dle
1710 1795 dlt
-7 -3 dlv
-6 -7 dlv
-3 -6 dlv
-3 -9 dlv
0 -16 dlv
3 -10 dlv
3 -6 dlv
6 -6 dlv
7 -3 dlv
12 0 dlv
6 3 dlv
7 6 dlv
3 6 dlv
3 10 dlv
0 16 dlv
-3 9 dlv
-3 6 dlv
-7 7 dlv
-6 3 dlv
-12 0 dlv
dle
1763 1729 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
1119 1861 dlt
25 -66 dlv
25 66 dlv
dle
12 0 1179 1861 dls
0 -66 1185 1861 dls
12 0 1179 1795 dls
1210 1795 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
1280 1845 dlt
0 3 dlv
3 7 dlv
3 3 dlv
6 3 dlv
13 0 dlv
6 -3 dlv
3 -3 dlv
3 -7 dlv
0 -6 dlv
-3 -6 dlv
-6 -10 dlv
-32 -31 dlv
44 0 dlv
dle
1119 1993 dlt
25 -66 dlv
25 66 dlv
dle
12 0 1179 1993 dls
0 -66 1185 1993 dls
12 0 1179 1927 dls
1210 1927 dlt
0 66 dlv
44 -66 dlv
0 66 dlv
dle
1286 1980 dlt
6 4 dlv
10 9 dlv
0 -66 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2738 1993 dlt
0 53 dlv
20 -53 dlv
20 53 dlv
0 -53 dlv
dle
2798 2033 dlt
0 3 dlv
3 5 dlv
2 2 dlv
5 3 dlv
10 0 dlv
5 -3 dlv
3 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-5 -8 dlv
-25 -25 dlv
35 0 dlv
dle
3478 1993 dlt
0 53 dlv
20 -53 dlv
20 53 dlv
0 -53 dlv
dle
3573 2011 dlt
-37 0 dlv
25 35 dlv
0 -53 dlv
dle
3484 3572 dlt
0 53 dlv
20 -53 dlv
21 53 dlv
0 -53 dlv
dle
3547 3625 dlt
28 0 dlv
-15 -20 dlv
7 0 dlv
5 -3 dlv
3 -3 dlv
2 -7 dlv
0 -5 dlv
-2 -8 dlv
-5 -5 dlv
-8 -2 dlv
-7 0 dlv
-8 2 dlv
-2 3 dlv
-3 5 dlv
dle
2731 3572 dlt
0 53 dlv
20 -53 dlv
21 53 dlv
0 -53 dlv
dle
2797 3615 dlt
5 2 dlv
7 8 dlv
0 -53 dlv
dle
0 800 400 slc
0 800 400 sfc
482 1233 dpb
422 1293 dpv
343 1293 dpv
284 1233 dpv
343 1174 dpv
422 1174 dpv
dpu
284 2363 dpb
284 2482 dpv
356 2482 dpv
416 2422 dpv
356 2363 dpv
dpu
6031 2482 dpb
6031 2363 dpv
5958 2363 dpv
5899 2422 dpv
5958 2482 dpv
dpu
284 2891 dpb
284 3010 dpv
356 3010 dpv
416 2951 dpv
356 2891 dpv
dpu
6031 3010 dpb
6031 2891 dpv
5958 2891 dpv
5899 2951 dpv
5958 3010 dpv
dpu
5899 3618 dpb
5899 3737 dpv
5971 3737 dpv
6031 3678 dpv
5971 3618 dpv
dpu
0 1062 6322 3747 clwin
gfs
%%Trailer
%%EOF
