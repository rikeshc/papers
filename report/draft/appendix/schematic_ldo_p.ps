%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
172 132 4810 6330 600 pap
%%Page: cds 1
gis
0 2034 4810 4294 clwin
0 2034 4808 4295 clwin
0 2034 4808 4295 clwin
0 2034 4810 4295 clwin
0 2034 4808 4295 clwin
ssls
0 800 400 slc
0 800 400 sfc
28 0 3379 2410 dls
3422 2410 15 dcu
0 118 3438 2351 dls
0 118 3458 2351 dls
3524 2489 dlt
-39 -20 dlv
39 -19 dlv
dle
78 0 3458 2410 dls
3458 2469 dlt
78 0 dlv
0 59 dlv
dle
3458 2351 dlt
78 0 dlv
0 -58 dlv
dle
58 0 946 2410 dls
0 118 1004 2351 dls
0 118 1024 2351 dls
1024 2351 dlt
79 0 dlv
0 -58 dlv
dle
79 0 1024 2410 dls
1024 2469 dlt
79 0 dlv
0 59 dlv
dle
1063 2371 dlt
40 -20 dlv
-40 -19 dlv
dle
-59 0 2280 2410 dls
0 118 2221 2351 dls
0 118 2202 2351 dls
2202 2351 dlt
-79 0 dlv
0 -58 dlv
dle
-79 0 2202 2410 dls
2202 2469 dlt
-79 0 dlv
0 59 dlv
dle
2162 2371 dlt
-39 -20 dlv
39 -19 dlv
dle
59 0 2751 2410 dls
0 118 2810 2351 dls
0 118 2830 2351 dls
2830 2351 dlt
78 0 dlv
0 -58 dlv
dle
78 0 2830 2410 dls
2830 2469 dlt
78 0 dlv
0 59 dlv
dle
2869 2371 dlt
39 -20 dlv
-39 -19 dlv
dle
4164 2293 dlt
0 47 dlv
-39 11 dlv
79 24 dlv
-79 24 dlv
79 23 dlv
-79 24 dlv
79 23 dlv
-40 12 dlv
0 47 dlv
dle
58 0 946 2960 dls
0 118 1004 2901 dls
0 118 1024 2901 dls
1024 2901 dlt
79 0 dlv
0 -59 dlv
dle
79 0 1024 2960 dls
1024 3019 dlt
79 0 dlv
0 59 dlv
dle
1063 2921 dlt
40 -20 dlv
-40 -20 dlv
dle
-59 0 2280 2960 dls
0 118 2221 2901 dls
0 118 2202 2901 dls
2202 2901 dlt
-79 0 dlv
0 -59 dlv
dle
-79 0 2202 2960 dls
2202 3019 dlt
-79 0 dlv
0 59 dlv
dle
2162 2921 dlt
-39 -20 dlv
39 -20 dlv
dle
59 0 2751 2960 dls
0 118 2810 2901 dls
0 118 2830 2901 dls
2830 2901 dlt
78 0 dlv
0 -59 dlv
dle
78 0 2830 2960 dls
2830 3019 dlt
78 0 dlv
0 59 dlv
dle
2869 2921 dlt
39 -20 dlv
-39 -20 dlv
dle
4164 2921 dlt
0 47 dlv
-39 12 dlv
79 23 dlv
-79 24 dlv
79 23 dlv
-79 24 dlv
79 23 dlv
-40 12 dlv
0 47 dlv
dle
28 0 2751 3509 dls
2794 3509 15 dcu
0 117 2810 3451 dls
0 117 2830 3451 dls
2896 3588 dlt
-39 -20 dlv
39 -19 dlv
dle
78 0 2830 3509 dls
2830 3568 dlt
78 0 dlv
0 59 dlv
dle
2830 3451 dlt
78 0 dlv
0 -59 dlv
dle
-27 0 2280 3509 dls
2237 3509 16 15 delu
0 117 2221 3451 dls
0 117 2202 3451 dls
2135 3588 dlt
39 -20 dlv
-39 -19 dlv
dle
-79 0 2202 3509 dls
2202 3568 dlt
-79 0 dlv
0 59 dlv
dle
2202 3451 dlt
-79 0 dlv
0 -59 dlv
dle
59 0 553 3509 dls
0 117 612 3451 dls
0 117 631 3451 dls
631 3451 dlt
79 0 dlv
0 -59 dlv
dle
79 0 631 3509 dls
631 3568 dlt
79 0 dlv
0 59 dlv
dle
671 3470 dlt
39 -19 dlv
-39 -20 dlv
dle
-59 0 1652 3509 dls
0 117 1593 3451 dls
0 117 1574 3451 dls
1574 3451 dlt
-79 0 dlv
0 -59 dlv
dle
-79 0 1574 3509 dls
1574 3568 dlt
-79 0 dlv
0 59 dlv
dle
1534 3470 dlt
-39 -19 dlv
39 -20 dlv
dle
28 0 4007 3666 dls
4050 3666 15 dcu
0 117 4066 3608 dls
0 117 4086 3608 dls
4153 3745 dlt
-40 -20 dlv
40 -19 dlv
dle
78 0 4086 3666 dls
4086 3725 dlt
78 0 dlv
0 59 dlv
dle
4086 3608 dlt
78 0 dlv
0 -59 dlv
dle
28 0 3379 4059 dls
3422 4059 15 16 delu
0 118 3438 4000 dls
0 118 3458 4000 dls
3524 4137 dlt
-39 -19 dlv
39 -20 dlv
dle
78 0 3458 4059 dls
3458 4118 dlt
78 0 dlv
0 59 dlv
dle
3458 4000 dlt
78 0 dlv
0 -59 dlv
dle
28 0 2751 4059 dls
2794 4059 15 16 delu
0 118 2810 4000 dls
0 118 2830 4000 dls
2896 4137 dlt
-39 -19 dlv
39 -20 dlv
dle
78 0 2830 4059 dls
2830 4118 dlt
78 0 dlv
0 59 dlv
dle
2830 4000 dlt
78 0 dlv
0 -59 dlv
dle
-27 0 2280 4059 dls
2237 4059 15 dcu
0 118 2221 4000 dls
0 118 2202 4000 dls
2135 4137 dlt
39 -19 dlv
-39 -20 dlv
dle
-79 0 2202 4059 dls
2202 4118 dlt
-79 0 dlv
0 59 dlv
dle
2202 4000 dlt
-79 0 dlv
0 -59 dlv
dle
800 800 851 slc
800 800 851 sfc
0 1295 474 2214 dls
79 0 474 3509 dls
0 236 710 3627 dls
0 117 710 3392 dls
550 0 317 2764 dls
550 0 317 2607 dls
0 196 867 2764 dls
0 197 867 2410 dls
867 2763 20 19 dels
867 2606 20 19 dels
79 0 867 2960 dls
79 0 867 2410 dls
864 0 239 2136 dls
393 0 710 3392 dls
0 314 1103 3078 dls
0 314 1103 2528 dls
0 157 1103 2136 dls
0 118 1103 2842 dls
0 117 1103 2293 dls
1103 3392 19 dcs
1103 2136 19 dcs
392 0 1103 3392 dls
0 117 1495 3392 dls
0 79 1495 3627 dls
1414 0 317 3784 dls
79 0 1652 3509 dls
0 275 1731 3509 dls
1766 0 357 4255 dls
1413 0 710 3863 dls
1020 0 1103 2136 dls
0 314 2123 2528 dls
0 236 2123 3627 dls
0 235 2123 3078 dls
0 157 2123 2136 dls
0 118 2123 4059 dls
0 118 2123 3509 dls
0 118 2123 2842 dls
0 117 2123 2293 dls
0 78 2123 4177 dls
0 78 2123 3863 dls
0 79 2123 3313 dls
2123 3862 20 19 dels
2123 3313 20 19 dels
2123 2135 20 19 dels
2123 4255 20 19 dels
1570 0 867 2764 dls
1570 0 867 2607 dls
314 0 2123 3313 dls
157 0 2280 4059 dls
157 0 2280 2960 dls
157 0 2280 2410 dls
0 550 2437 3313 dls
0 196 2437 3863 dls
0 196 2437 2764 dls
0 197 2437 2410 dls
2437 4059 19 20 dels
2437 3863 19 dcs
2437 2960 19 20 dels
2437 2410 19 dcs
2277 0 317 3235 dls
314 0 2280 3509 dls
0 274 2594 3235 dls
2594 3509 19 dcs
314 0 2437 4059 dls
314 0 2437 2960 dls
314 0 2437 2410 dls
157 0 2594 3509 dls
1413 0 1495 3706 dls
785 0 2123 4255 dls
785 0 2123 2136 dls
0 314 2908 2528 dls
0 235 2908 3706 dls
0 157 2908 3235 dls
0 157 2908 3078 dls
0 157 2908 2136 dls
0 118 2908 4059 dls
0 118 2908 3509 dls
0 118 2908 2842 dls
0 117 2908 2293 dls
0 78 2908 4177 dls
0 79 2908 3627 dls
2908 4255 19 dcs
2908 3706 19 dcs
2908 3235 19 dcs
2908 2136 19 dcs
864 0 2437 3863 dls
393 0 2908 3235 dls
0 825 3301 2410 dls
0 196 3301 3863 dls
78 0 3301 4059 dls
78 0 3301 2410 dls
628 0 2908 4255 dls
628 0 2908 2136 dls
0 1138 3536 2528 dls
0 275 3536 3666 dls
0 157 3536 2136 dls
0 118 3536 4059 dls
0 118 3536 2410 dls
0 78 3536 4177 dls
3536 4255 19 dcs
3536 3666 19 dcs
3536 2136 19 dcs
3455 0 474 2214 dls
0 471 3929 2214 dls
471 0 3536 3666 dls
628 0 3536 4255 dls
628 0 3536 2136 dls
235 0 3929 2685 dls
0 471 4164 3784 dls
0 236 4164 3313 dls
0 236 4164 2685 dls
0 157 4164 3156 dls
0 157 4164 2136 dls
0 157 4164 2528 dls
0 118 4164 3666 dls
4164 3313 19 dcs
4164 2685 19 20 dels
393 0 4164 3313 dls
800 800 851 slc
800 800 851 sfc
4247 3380 dlt
15 -39 dlv
15 39 dlv
dle
4286 3341 dlt
0 39 dlv
17 0 dlv
5 -2 dlv
2 -2 dlv
2 -4 dlv
0 -3 dlv
-2 -4 dlv
-2 -2 dlv
-5 -2 dlv
-17 0 dlv
dle
13 -20 4299 3361 dls
4349 3380 dlt
-24 0 dlv
0 -39 dlv
24 0 dlv
dle
15 0 4325 3361 dls
4387 3371 dlt
-2 3 dlv
-4 4 dlv
-4 2 dlv
-7 0 dlv
-4 -2 dlv
-3 -4 dlv
-2 -3 dlv
-2 -6 dlv
0 -9 dlv
2 -6 dlv
2 -4 dlv
3 -3 dlv
4 -2 dlv
7 0 dlv
4 2 dlv
4 3 dlv
2 4 dlv
0 6 dlv
-10 0 dlv
dle
3721 3733 dlt
15 -39 dlv
15 39 dlv
dle
3786 3724 dlt
-2 4 dlv
-4 3 dlv
-3 2 dlv
-8 0 dlv
-4 -2 dlv
-3 -3 dlv
-2 -4 dlv
-2 -6 dlv
0 -9 dlv
2 -6 dlv
2 -3 dlv
3 -4 dlv
4 -2 dlv
8 0 dlv
3 2 dlv
4 4 dlv
2 3 dlv
0 6 dlv
-9 0 dlv
dle
29 0 3794 3690 dls
3837 3694 dlt
0 39 dlv
16 0 dlv
6 -2 dlv
2 -2 dlv
2 -3 dlv
0 -6 dlv
-2 -4 dlv
-2 -2 dlv
-6 -1 dlv
-16 0 dlv
dle
3870 3694 dlt
15 39 dlv
15 -39 dlv
dle
18 0 3876 3707 dls
3936 3728 dlt
-4 3 dlv
-6 2 dlv
-7 0 dlv
-6 -2 dlv
-4 -3 dlv
0 -4 dlv
2 -4 dlv
2 -2 dlv
4 -2 dlv
11 -3 dlv
4 -2 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-4 -4 dlv
-6 -2 dlv
-7 0 dlv
-6 2 dlv
-4 4 dlv
dle
3973 3728 dlt
-4 3 dlv
-5 2 dlv
-8 0 dlv
-5 -2 dlv
-4 -3 dlv
0 -4 dlv
2 -4 dlv
2 -2 dlv
3 -2 dlv
12 -3 dlv
3 -2 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-4 -4 dlv
-5 -2 dlv
-8 0 dlv
-5 2 dlv
-4 4 dlv
dle
3868 2870 dlt
15 -40 dlv
15 40 dlv
dle
3907 2830 dlt
0 40 dlv
13 0 dlv
6 -2 dlv
4 -4 dlv
1 -4 dlv
2 -5 dlv
0 -10 dlv
-2 -5 dlv
-1 -4 dlv
-4 -4 dlv
-6 -2 dlv
-13 0 dlv
dle
7 0 3943 2870 dls
0 -40 3946 2870 dls
7 0 3943 2830 dls
3956 2870 dlt
15 -40 dlv
15 40 dlv
dle
1000 0 0 slc
1000 0 0 sfc
357 2136 dpb
321 2100 dpv
274 2100 dpv
239 2136 dpv
274 2171 dpv
321 2171 dpv
dps
3364 2395 3395 2426 dbs
3521 2277 3552 2308 dbs
3521 2395 3552 2426 dbs
3521 2512 3552 2544 dbs
930 2395 961 2426 dbs
1087 2512 1118 2544 dbs
1087 2395 1118 2426 dbs
1087 2277 1118 2308 dbs
2264 2395 2296 2426 dbs
2107 2512 2139 2544 dbs
2107 2395 2139 2426 dbs
2107 2277 2139 2308 dbs
2735 2395 2767 2426 dbs
2892 2512 2924 2544 dbs
2892 2395 2924 2426 dbs
2892 2277 2924 2308 dbs
4149 2308 dpb
4180 2308 dpv
4180 2277 dpv
4149 2277 dpv
dps
4149 2544 dpb
4180 2544 dpv
4180 2512 dpv
4149 2512 dpv
dps
239 2571 dpb
239 2642 dpv
282 2642 dpv
317 2607 dpv
282 2571 dpv
dps
239 2728 dpb
239 2799 dpv
282 2799 dpv
317 2764 dpv
282 2728 dpv
dps
930 2944 961 2976 dbs
1087 3062 1118 3093 dbs
1087 2944 1118 2976 dbs
1087 2826 1118 2858 dbs
2264 2944 2296 2976 dbs
2107 3062 2139 3093 dbs
2107 2944 2139 2976 dbs
2107 2826 2139 2858 dbs
2735 2944 2767 2976 dbs
2892 3062 2924 3093 dbs
2892 2944 2924 2976 dbs
2892 2826 2924 2858 dbs
4149 2936 dpb
4180 2936 dpv
4180 2905 dpv
4149 2905 dpv
dps
4149 3172 dpb
4180 3172 dpv
4180 3140 dpv
4149 3140 dpv
dps
239 3199 dpb
239 3270 dpv
282 3270 dpv
317 3235 dpv
282 3199 dpv
dps
4557 3278 dpb
4557 3348 dpv
4600 3348 dpv
4635 3313 dpv
4600 3278 dpv
dps
2735 3494 2767 3525 dbs
2892 3376 2924 3407 dbs
2892 3494 2924 3525 dbs
2892 3611 2924 3643 dbs
2264 3494 2296 3525 dbs
2107 3376 2139 3407 dbs
2107 3494 2139 3525 dbs
2107 3611 2139 3643 dbs
537 3494 569 3525 dbs
694 3611 726 3643 dbs
694 3494 726 3525 dbs
694 3376 726 3407 dbs
1636 3494 1668 3525 dbs
1479 3611 1511 3643 dbs
1479 3494 1511 3525 dbs
1479 3376 1511 3407 dbs
239 3749 dpb
239 3820 dpv
282 3820 dpv
317 3784 dpv
282 3749 dpv
dps
3992 3651 4023 3682 dbs
4149 3533 4180 3564 dbs
4149 3651 4180 3682 dbs
4149 3769 4180 3800 dbs
3364 4043 3395 4075 dbs
3521 3926 3552 3957 dbs
3521 4043 3552 4075 dbs
3521 4161 3552 4192 dbs
2735 4043 2767 4075 dbs
2892 3926 2924 3957 dbs
2892 4043 2924 4075 dbs
2892 4161 2924 4192 dbs
2264 4043 2296 4075 dbs
2107 3926 2139 3957 dbs
2107 4043 2139 4075 dbs
2107 4161 2139 4192 dbs
357 4255 dpb
321 4220 dpv
274 4220 dpv
239 4255 dpv
274 4291 dpv
321 4291 dpv
dps
1000 0 0 slc
1000 0 0 sfc
131 2146 dlt
-2 4 dlv
-3 3 dlv
-4 2 dlv
-8 0 dlv
-3 -2 dlv
-4 -3 dlv
-2 -4 dlv
-2 -6 dlv
0 -9 dlv
2 -6 dlv
2 -3 dlv
4 -4 dlv
3 -2 dlv
8 0 dlv
4 2 dlv
3 4 dlv
2 3 dlv
0 6 dlv
-9 0 dlv
dle
144 2116 dlt
0 39 dlv
27 -39 dlv
0 39 dlv
dle
185 2116 dlt
0 39 dlv
14 0 dlv
5 -2 dlv
4 -3 dlv
2 -4 dlv
2 -6 dlv
0 -9 dlv
-2 -6 dlv
-2 -3 dlv
-4 -4 dlv
-5 -2 dlv
-14 0 dlv
dle
1 2626 dlt
15 -39 dlv
15 39 dlv
dle
41 2608 dlt
16 0 dlv
6 -2 dlv
2 -2 dlv
2 -4 dlv
0 -6 dlv
-2 -3 dlv
-2 -2 dlv
-6 -2 dlv
-16 0 dlv
0 39 dlv
16 0 dlv
6 -2 dlv
2 -2 dlv
2 -3 dlv
0 -4 dlv
-2 -4 dlv
-2 -2 dlv
-6 -1 dlv
dle
8 0 76 2626 dls
0 -39 80 2626 dls
8 0 76 2587 dls
89 2587 dlt
15 39 dlv
15 -39 dlv
dle
19 0 95 2600 dls
155 2621 dlt
-4 3 dlv
-6 2 dlv
-7 0 dlv
-6 -2 dlv
-4 -3 dlv
0 -4 dlv
2 -4 dlv
2 -2 dlv
4 -2 dlv
11 -3 dlv
4 -2 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-4 -4 dlv
-6 -2 dlv
-7 0 dlv
-6 2 dlv
-4 4 dlv
dle
194 2600 dlt
-28 0 dlv
19 26 dlv
0 -39 dlv
dle
1 2783 dlt
15 -39 dlv
15 39 dlv
dle
41 2765 dlt
16 0 dlv
6 -2 dlv
2 -2 dlv
2 -4 dlv
0 -6 dlv
-2 -3 dlv
-2 -2 dlv
-6 -2 dlv
-16 0 dlv
0 39 dlv
16 0 dlv
6 -2 dlv
2 -1 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-2 -2 dlv
-6 -1 dlv
dle
8 0 76 2783 dls
0 -39 80 2783 dls
8 0 76 2744 dls
89 2744 dlt
15 39 dlv
15 -39 dlv
dle
19 0 95 2757 dls
155 2778 dlt
-4 3 dlv
-6 2 dlv
-7 0 dlv
-6 -2 dlv
-4 -3 dlv
0 -4 dlv
2 -4 dlv
2 -2 dlv
4 -2 dlv
11 -3 dlv
4 -2 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-4 -4 dlv
-6 -2 dlv
-7 0 dlv
-6 2 dlv
-4 4 dlv
dle
170 2783 dlt
20 0 dlv
-11 -15 dlv
6 0 dlv
3 -2 dlv
2 -1 dlv
2 -6 dlv
0 -4 dlv
-2 -5 dlv
-4 -4 dlv
-5 -2 dlv
-6 0 dlv
-5 2 dlv
-2 2 dlv
-2 3 dlv
dle
1 3254 dlt
15 -39 dlv
15 39 dlv
dle
41 3236 dlt
16 0 dlv
6 -2 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-2 -4 dlv
-2 -2 dlv
-6 -2 dlv
-16 0 dlv
0 39 dlv
16 0 dlv
6 -2 dlv
2 -1 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-2 -2 dlv
-6 -1 dlv
dle
8 0 76 3254 dls
0 -39 80 3254 dls
8 0 76 3215 dls
89 3215 dlt
15 39 dlv
15 -39 dlv
dle
19 0 95 3228 dls
155 3249 dlt
-4 3 dlv
-6 2 dlv
-7 0 dlv
-6 -2 dlv
-4 -3 dlv
0 -4 dlv
2 -4 dlv
2 -2 dlv
4 -2 dlv
11 -3 dlv
4 -2 dlv
2 -2 dlv
2 -4 dlv
0 -5 dlv
-4 -4 dlv
-6 -2 dlv
-7 0 dlv
-6 2 dlv
-4 4 dlv
dle
168 3245 dlt
0 2 dlv
2 4 dlv
1 1 dlv
4 2 dlv
8 0 dlv
3 -2 dlv
2 -1 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-3 -5 dlv
-19 -19 dlv
26 0 dlv
dle
4657 3333 dlt
15 -39 dlv
15 39 dlv
dle
4696 3294 dlt
0 39 dlv
17 0 dlv
6 -2 dlv
1 -2 dlv
2 -4 dlv
0 -3 dlv
-2 -4 dlv
-1 -2 dlv
-6 -2 dlv
-17 0 dlv
dle
13 -20 4709 3314 dls
4760 3333 dlt
-25 0 dlv
0 -39 dlv
25 0 dlv
dle
15 0 4735 3314 dls
4797 3323 dlt
-2 4 dlv
-4 4 dlv
-3 2 dlv
-8 0 dlv
-4 -2 dlv
-3 -4 dlv
-2 -4 dlv
-2 -5 dlv
0 -10 dlv
2 -5 dlv
2 -4 dlv
3 -4 dlv
4 -1 dlv
8 0 dlv
3 1 dlv
4 4 dlv
2 4 dlv
0 5 dlv
-9 0 dlv
dle
56 3804 dlt
15 -39 dlv
15 39 dlv
dle
96 3765 dlt
0 39 dlv
16 0 dlv
6 -2 dlv
2 -2 dlv
2 -4 dlv
0 -3 dlv
-2 -4 dlv
-2 -2 dlv
-6 -2 dlv
-16 0 dlv
dle
13 -20 109 3785 dls
159 3804 dlt
-24 0 dlv
0 -39 dlv
24 0 dlv
dle
15 0 135 3785 dls
170 3765 dlt
0 39 dlv
25 0 dlv
dle
15 0 170 3785 dls
68 4275 dlt
15 -39 dlv
15 39 dlv
dle
107 4236 dlt
0 39 dlv
17 0 dlv
6 -2 dlv
2 -2 dlv
2 -4 dlv
0 -3 dlv
-2 -4 dlv
-2 -2 dlv
-6 -2 dlv
-17 0 dlv
dle
14 -20 120 4256 dls
171 4275 dlt
-24 0 dlv
0 -39 dlv
24 0 dlv
dle
15 0 147 4256 dls
208 4266 dlt
-2 3 dlv
-3 4 dlv
-4 2 dlv
-8 0 dlv
-3 -2 dlv
-4 -4 dlv
-2 -3 dlv
-2 -6 dlv
0 -9 dlv
2 -6 dlv
2 -4 dlv
4 -4 dlv
3 -1 dlv
8 0 dlv
4 1 dlv
3 4 dlv
2 4 dlv
dle
1000 0 0 slc
1000 0 0 sfc
3578 2544 dlt
0 31 dlv
12 -31 dlv
11 31 dlv
0 -31 dlv
dle
3616 2569 dlt
3 2 dlv
5 4 dlv
0 -31 dlv
dle
3660 2554 dlt
-23 0 dlv
15 21 dlv
0 -31 dlv
dle
1148 2548 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
1187 2573 dlt
3 2 dlv
4 4 dlv
0 -31 dlv
dle
1217 2579 dlt
-5 -1 dlv
-3 -5 dlv
-1 -7 dlv
0 -5 dlv
1 -7 dlv
3 -5 dlv
5 -1 dlv
3 0 dlv
4 1 dlv
3 5 dlv
2 7 dlv
0 5 dlv
-2 7 dlv
-3 5 dlv
-4 1 dlv
-3 0 dlv
dle
-21 -31 1229 2579 dls
2019 2548 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
2054 2579 dlt
21 0 dlv
-15 -31 dlv
dle
2953 2548 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
3006 2579 dlt
-15 0 dlv
-2 -13 dlv
2 1 dlv
4 2 dlv
5 0 dlv
4 -2 dlv
3 -3 dlv
2 -4 dlv
0 -3 dlv
-2 -5 dlv
-3 -3 dlv
-4 -1 dlv
-5 0 dlv
-4 1 dlv
-2 2 dlv
-1 3 dlv
dle
4225 2548 dlt
0 31 dlv
14 0 dlv
4 -1 dlv
2 -2 dlv
1 -3 dlv
0 -3 dlv
-1 -3 dlv
-2 -1 dlv
-4 -2 dlv
-14 0 dlv
dle
10 -16 4236 2564 dls
4257 2572 dlt
0 1 dlv
1 3 dlv
2 2 dlv
3 1 dlv
6 0 dlv
3 -1 dlv
1 -2 dlv
2 -3 dlv
0 -3 dlv
-2 -3 dlv
-3 -4 dlv
-15 -15 dlv
21 0 dlv
dle
1148 3097 dlt
0 32 dlv
12 -32 dlv
12 32 dlv
0 -32 dlv
dle
1187 3123 dlt
3 1 dlv
4 5 dlv
0 -32 dlv
dle
1212 3123 dlt
3 1 dlv
5 5 dlv
0 -32 dlv
dle
2019 3097 dlt
0 32 dlv
12 -32 dlv
12 32 dlv
0 -32 dlv
dle
2073 3124 dlt
-1 3 dlv
-5 2 dlv
-3 0 dlv
-4 -2 dlv
-3 -4 dlv
-2 -8 dlv
0 -7 dlv
2 -6 dlv
3 -3 dlv
4 -2 dlv
2 0 dlv
4 2 dlv
3 3 dlv
2 4 dlv
0 2 dlv
-2 4 dlv
-3 3 dlv
-4 2 dlv
-2 0 dlv
-4 -2 dlv
-3 -3 dlv
-2 -4 dlv
dle
2953 3097 dlt
0 32 dlv
12 -32 dlv
12 32 dlv
0 -32 dlv
dle
3010 3108 dlt
-22 0 dlv
15 21 dlv
0 -32 dlv
dle
4225 3176 dlt
0 31 dlv
14 0 dlv
4 -1 dlv
2 -2 dlv
1 -3 dlv
0 -3 dlv
-1 -3 dlv
-2 -1 dlv
-4 -2 dlv
-14 0 dlv
dle
10 -16 4236 3192 dls
4260 3201 dlt
3 2 dlv
4 4 dlv
0 -31 dlv
dle
2949 3643 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
2988 3668 dlt
3 2 dlv
5 4 dlv
0 -31 dlv
dle
2023 3643 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
2060 3674 dlt
17 0 dlv
-9 -12 dlv
4 0 dlv
3 -1 dlv
2 -2 dlv
1 -4 dlv
0 -3 dlv
-1 -5 dlv
-3 -3 dlv
-5 -1 dlv
-4 0 dlv
-5 1 dlv
-1 2 dlv
-1 3 dlv
dle
755 3647 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
809 3668 dlt
-1 -5 dlv
-3 -3 dlv
-5 -1 dlv
-1 0 dlv
-5 1 dlv
-3 3 dlv
-1 5 dlv
0 1 dlv
1 5 dlv
3 3 dlv
5 1 dlv
1 0 dlv
5 -1 dlv
3 -3 dlv
1 -6 dlv
0 -8 dlv
-1 -7 dlv
-3 -5 dlv
-5 -1 dlv
-3 0 dlv
-4 1 dlv
-2 3 dlv
dle
1391 3647 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
1433 3678 dlt
-4 -1 dlv
-2 -3 dlv
0 -3 dlv
2 -3 dlv
3 -2 dlv
5 -1 dlv
5 -2 dlv
3 -3 dlv
1 -3 dlv
0 -4 dlv
-1 -3 dlv
-2 -2 dlv
-4 -1 dlv
-6 0 dlv
-4 1 dlv
-2 2 dlv
-1 3 dlv
0 4 dlv
1 3 dlv
3 3 dlv
4 2 dlv
6 1 dlv
3 2 dlv
2 3 dlv
0 3 dlv
-2 3 dlv
-4 1 dlv
-6 0 dlv
dle
4206 3800 dlt
0 31 dlv
12 -31 dlv
12 31 dlv
0 -31 dlv
dle
4244 3825 dlt
3 2 dlv
5 4 dlv
0 -31 dlv
dle
4267 3824 dlt
0 1 dlv
1 3 dlv
2 2 dlv
3 1 dlv
6 0 dlv
3 -1 dlv
1 -2 dlv
2 -3 dlv
0 -3 dlv
-2 -3 dlv
-3 -4 dlv
-15 -15 dlv
21 0 dlv
dle
3578 4192 dlt
0 32 dlv
12 -32 dlv
11 32 dlv
0 -32 dlv
dle
3616 4218 dlt
3 1 dlv
5 5 dlv
0 -32 dlv
dle
3640 4224 dlt
17 0 dlv
-9 -12 dlv
4 0 dlv
3 -2 dlv
2 -1 dlv
1 -5 dlv
0 -3 dlv
-1 -4 dlv
-3 -3 dlv
-5 -2 dlv
-4 0 dlv
-5 2 dlv
-1 1 dlv
-2 3 dlv
dle
2949 4192 dlt
0 32 dlv
12 -32 dlv
12 32 dlv
0 -32 dlv
dle
2993 4224 dlt
-5 -2 dlv
-3 -4 dlv
-1 -8 dlv
0 -4 dlv
1 -8 dlv
3 -4 dlv
5 -2 dlv
3 0 dlv
4 2 dlv
3 4 dlv
2 8 dlv
0 4 dlv
-2 8 dlv
-3 4 dlv
-4 2 dlv
-3 0 dlv
dle
-21 -32 3005 4224 dls
2023 4192 dlt
0 32 dlv
12 -32 dlv
12 32 dlv
0 -32 dlv
dle
2059 4216 dlt
0 2 dlv
1 3 dlv
2 1 dlv
3 2 dlv
6 0 dlv
3 -2 dlv
1 -1 dlv
2 -3 dlv
0 -3 dlv
-2 -3 dlv
-3 -5 dlv
-14 -15 dlv
20 0 dlv
dle
0 800 400 slc
0 800 400 sfc
357 2136 dpb
321 2171 dpv
274 2171 dpv
239 2136 dpv
274 2100 dpv
321 2100 dpv
dpu
239 2571 dpb
239 2642 dpv
282 2642 dpv
317 2607 dpv
282 2571 dpv
dpu
239 2728 dpb
239 2799 dpv
282 2799 dpv
317 2764 dpv
282 2728 dpv
dpu
239 3199 dpb
239 3270 dpv
282 3270 dpv
317 3235 dpv
282 3199 dpv
dpu
4557 3278 dpb
4557 3348 dpv
4600 3348 dpv
4635 3313 dpv
4600 3278 dpv
dpu
239 3749 dpb
239 3820 dpv
282 3820 dpv
317 3784 dpv
282 3749 dpv
dpu
357 4255 dpb
321 4291 dpv
274 4291 dpv
239 4255 dpv
274 4220 dpv
321 4220 dpv
dpu
0 2034 4810 4295 clwin
gfs
%%Trailer
%%EOF
