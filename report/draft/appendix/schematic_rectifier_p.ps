%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
172 132 4810 6330 600 pap
%%Page: cds 1
gis
0 2145 4804 4185 clwin
0 2145 4804 4183 clwin
0 2145 4804 4183 clwin
0 2145 4804 4186 clwin
0 2145 4804 4183 clwin
ssls
851 800 0 slc
851 800 0 sfc
3332 2852 dlt
0 50 dlv
22 0 dlv
7 -2 dlv
2 -2 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-7 -2 dlv
-22 0 dlv
dle
17 -27 3349 2879 dls
3416 2891 dlt
-3 4 dlv
-4 5 dlv
-5 2 dlv
-10 0 dlv
-4 -2 dlv
-5 -5 dlv
-3 -4 dlv
-2 -8 dlv
0 -12 dlv
2 -7 dlv
3 -5 dlv
5 -4 dlv
4 -3 dlv
10 0 dlv
5 3 dlv
4 4 dlv
3 5 dlv
dle
3466 2891 dlt
-2 4 dlv
-5 5 dlv
-5 2 dlv
-9 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -4 dlv
-3 -8 dlv
0 -12 dlv
3 -7 dlv
2 -5 dlv
5 -4 dlv
5 -3 dlv
9 0 dlv
5 3 dlv
5 4 dlv
2 5 dlv
dle
1329 2852 dlt
0 50 dlv
22 0 dlv
7 -2 dlv
2 -2 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-7 -2 dlv
-22 0 dlv
dle
17 -27 1346 2879 dls
1413 2891 dlt
-2 4 dlv
-5 5 dlv
-5 2 dlv
-10 0 dlv
-4 -2 dlv
-5 -5 dlv
-3 -4 dlv
-2 -8 dlv
0 -12 dlv
2 -7 dlv
3 -5 dlv
5 -4 dlv
4 -3 dlv
10 0 dlv
5 3 dlv
5 4 dlv
2 5 dlv
dle
1463 2891 dlt
-2 4 dlv
-5 5 dlv
-5 2 dlv
-9 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -4 dlv
-3 -8 dlv
0 -12 dlv
3 -7 dlv
2 -5 dlv
5 -4 dlv
5 -3 dlv
9 0 dlv
5 3 dlv
5 4 dlv
2 5 dlv
dle
0 800 400 slc
0 800 400 sfc
75 0 1822 2677 dls
0 -151 1897 2752 dls
0 151 1922 2601 dls
1922 2601 dlt
101 0 dlv
0 -75 dlv
dle
101 0 1922 2677 dls
1922 2752 dlt
101 0 dlv
0 75 dlv
dle
1972 2626 dlt
51 -25 dlv
-51 -25 dlv
dle
-75 0 2976 2677 dls
0 -151 2901 2752 dls
0 151 2876 2601 dls
2876 2601 dlt
-101 0 dlv
0 -75 dlv
dle
-101 0 2876 2677 dls
2876 2752 dlt
-101 0 dlv
0 75 dlv
dle
2826 2626 dlt
-51 -25 dlv
51 -25 dlv
dle
-201 0 4181 2526 dls
-201 0 4181 2626 dls
201 0 3177 2677 dls
-201 0 4181 2727 dls
-201 0 4181 2827 dls
3980 2928 dlt
0 -502 dlv
-201 0 dlv
-401 251 dlv
401 251 dlv
201 0 dlv
dle
0 -502 3779 2928 dls
201 0 617 2526 dls
201 0 617 2626 dls
-201 0 1621 2677 dls
201 0 617 2727 dls
201 0 617 2827 dls
818 2928 dlt
0 -502 dlv
201 0 dlv
401 251 dlv
-401 251 dlv
-201 0 dlv
dle
0 -502 1019 2928 dls
-35 0 2976 3881 dls
2921 3881 20 dcu
0 -151 2901 3957 dls
0 151 2876 3806 dls
2791 3982 dlt
50 -25 dlv
-50 -25 dlv
dle
-101 0 2876 3881 dls
2876 3957 dlt
-101 0 dlv
0 75 dlv
dle
2876 3806 dlt
-101 0 dlv
0 -75 dlv
dle
35 0 1822 3881 dls
1877 3881 20 dcu
0 -151 1897 3957 dls
0 151 1922 3806 dls
2007 3982 dlt
-50 -25 dlv
50 -25 dlv
dle
101 0 1922 3881 dls
1922 3957 dlt
101 0 dlv
0 75 dlv
dle
1922 3806 dlt
101 0 dlv
0 -75 dlv
dle
0 800 400 slc
0 800 400 sfc
0 -33 3603 2693 dls
3603 2679 dlt
3 7 dlv
4 5 dlv
5 2 dlv
7 0 dlv
dle
3661 2686 dlt
-5 5 dlv
-5 2 dlv
-7 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -7 dlv
0 -5 dlv
2 -7 dlv
5 -5 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
5 5 dlv
dle
3704 2686 dlt
-5 5 dlv
-5 2 dlv
-7 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -7 dlv
0 -5 dlv
2 -7 dlv
5 -5 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
5 5 dlv
dle
0 -33 1093 2693 dls
1093 2679 dlt
3 7 dlv
5 5 dlv
4 2 dlv
7 0 dlv
dle
1151 2686 dlt
-5 5 dlv
-5 2 dlv
-7 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -7 dlv
0 -5 dlv
2 -7 dlv
5 -5 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
5 5 dlv
dle
1194 2686 dlt
-5 5 dlv
-5 2 dlv
-7 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -7 dlv
0 -5 dlv
2 -7 dlv
5 -5 dlv
5 -2 dlv
7 0 dlv
5 2 dlv
5 5 dlv
dle
800 800 851 slc
800 800 851 sfc
302 0 215 2275 dls
0 1506 517 2626 dls
0 251 517 2275 dls
517 2275 25 dcs
251 0 316 3179 dls
0 452 567 2727 dls
567 3179 25 dcs
100 0 517 2526 dls
100 0 517 2626 dls
50 0 567 2727 dls
0 251 617 2827 dls
803 0 316 3580 dls
0 301 1119 3580 dls
1119 3580 25 dcs
1205 0 617 3078 dls
703 0 1119 3580 dls
703 0 1119 3881 dls
201 0 1621 2677 dls
0 502 1822 3078 dls
1822 3078 25 dcs
1506 0 517 2275 dls
1506 0 517 4132 dls
1456 0 567 3179 dls
201 0 1822 3078 dls
0 552 2023 3179 dls
0 251 2023 2275 dls
0 251 2023 2827 dls
0 151 2023 3881 dls
0 151 2023 2526 dls
0 100 2023 4032 dls
2023 4132 25 dcs
2023 2275 25 dcs
752 0 2023 4132 dls
752 0 2023 2275 dls
0 352 2775 2827 dls
0 251 2775 2275 dls
0 151 2775 3881 dls
0 151 2775 2526 dls
0 151 2775 3580 dls
0 100 2775 4032 dls
2775 4132 25 dcs
2775 2275 25 dcs
201 0 2976 2677 dls
854 0 2775 3179 dls
653 0 2976 3881 dls
0 702 3629 3179 dls
3629 3179 25 dcs
552 0 3629 3179 dls
0 352 4181 2827 dls
4181 3179 25 dcs
1456 0 2775 3580 dls
50 0 4181 2727 dls
0 853 4231 2727 dls
4231 3580 25 dcs
1506 0 2775 4132 dls
1506 0 2775 2275 dls
100 0 4181 2526 dls
100 0 4181 2626 dls
0 1506 4281 2626 dls
0 251 4281 2275 dls
4281 4132 25 dcs
301 0 4181 3179 dls
251 0 4231 3580 dls
201 0 4281 4132 dls
1000 0 0 slc
1000 0 0 sfc
366 2275 dpb
321 2230 dpv
261 2230 dpv
215 2275 dpv
261 2320 dpv
321 2320 dpv
dps
1802 2657 1842 2697 dbs
2002 2807 2043 2847 dbs
2002 2657 2043 2697 dbs
2002 2506 2043 2546 dbs
2956 2657 2996 2697 dbs
2755 2807 2796 2847 dbs
2755 2657 2796 2697 dbs
2755 2506 2796 2546 dbs
4161 2506 4201 2546 dbs
4161 2807 4201 2847 dbs
4161 2707 4201 2747 dbs
4161 2606 4201 2646 dbs
3157 2657 3197 2697 dbs
597 2506 637 2546 dbs
597 2807 637 2847 dbs
597 2707 637 2747 dbs
597 2606 637 2646 dbs
1601 2657 1641 2697 dbs
215 3133 dpb
215 3224 dpv
271 3224 dpv
316 3179 dpv
271 3133 dpv
dps
4583 3224 dpb
4583 3133 dpv
4527 3133 dpv
4482 3179 dpv
4527 3224 dpv
dps
215 3535 dpb
215 3625 dpv
271 3625 dpv
316 3580 dpv
271 3535 dpv
dps
4583 3625 dpb
4583 3535 dpv
4527 3535 dpv
4482 3580 dpv
4527 3625 dpv
dps
2956 3861 2996 3901 dbs
2755 3711 2796 3751 dbs
2755 3861 2796 3901 dbs
2755 4012 2796 4052 dbs
1802 3861 1842 3901 dbs
2002 3711 2043 3751 dbs
2002 3861 2043 3901 dbs
2002 4012 2043 4052 dbs
4482 4087 dpb
4482 4178 dpv
4537 4178 dpv
4583 4132 dpv
4537 4087 dpv
dps
1000 0 0 slc
1000 0 0 sfc
78 2288 dlt
-3 5 dlv
-5 5 dlv
-4 2 dlv
-10 0 dlv
-5 -2 dlv
-4 -5 dlv
-3 -5 dlv
-2 -7 dlv
0 -12 dlv
2 -7 dlv
3 -5 dlv
4 -5 dlv
5 -2 dlv
10 0 dlv
4 2 dlv
5 5 dlv
3 5 dlv
0 7 dlv
-12 0 dlv
dle
94 2250 dlt
0 50 dlv
34 -50 dlv
0 50 dlv
dle
147 2250 dlt
0 50 dlv
17 0 dlv
7 -2 dlv
5 -5 dlv
2 -5 dlv
2 -7 dlv
0 -12 dlv
-2 -7 dlv
-2 -5 dlv
-5 -5 dlv
-7 -2 dlv
-17 0 dlv
dle
4635 3204 dlt
19 -51 dlv
19 51 dlv
dle
9 0 4681 3204 dls
0 -51 4685 3204 dls
9 0 4681 3153 dls
4705 3153 dlt
0 51 dlv
33 -51 dlv
0 51 dlv
dle
4757 3192 dlt
0 2 dlv
3 5 dlv
2 2 dlv
5 3 dlv
9 0 dlv
5 -3 dlv
2 -2 dlv
3 -5 dlv
0 -5 dlv
-3 -4 dlv
-4 -8 dlv
-24 -24 dlv
33 0 dlv
dle
2 3204 dlt
19 -51 dlv
19 51 dlv
dle
10 0 47 3204 dls
0 -51 52 3204 dls
10 0 47 3153 dls
71 3153 dlt
0 51 dlv
34 -51 dlv
0 51 dlv
dle
124 3192 dlt
0 2 dlv
2 5 dlv
3 2 dlv
4 3 dlv
10 0 dlv
5 -3 dlv
2 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -4 dlv
-5 -8 dlv
-24 -24 dlv
34 0 dlv
dle
4635 3605 dlt
19 -50 dlv
19 50 dlv
dle
9 0 4681 3605 dls
0 -50 4685 3605 dls
9 0 4681 3555 dls
4705 3555 dlt
0 50 dlv
33 -50 dlv
0 50 dlv
dle
4762 3596 dlt
5 2 dlv
7 7 dlv
0 -50 dlv
dle
7 3605 dlt
19 -50 dlv
19 50 dlv
dle
10 0 52 3605 dls
0 -50 57 3605 dls
10 0 52 3555 dls
76 3555 dlt
0 50 dlv
34 -50 dlv
0 50 dlv
dle
134 3596 dlt
4 2 dlv
8 7 dlv
0 -50 dlv
dle
4610 4157 dlt
19 -50 dlv
19 50 dlv
dle
4660 4107 dlt
0 50 dlv
22 0 dlv
7 -2 dlv
2 -2 dlv
3 -5 dlv
0 -5 dlv
-3 -5 dlv
-2 -2 dlv
-7 -2 dlv
-22 0 dlv
dle
17 -27 4677 4134 dls
4742 4157 dlt
-31 0 dlv
0 -50 dlv
31 0 dlv
dle
19 0 4711 4134 dls
4789 4146 dlt
-2 4 dlv
-5 5 dlv
-5 2 dlv
-9 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -4 dlv
-2 -8 dlv
0 -12 dlv
2 -7 dlv
2 -5 dlv
5 -4 dlv
5 -3 dlv
9 0 dlv
5 3 dlv
5 4 dlv
2 5 dlv
dle
3838 2539 dlt
-3 5 dlv
-5 5 dlv
-4 2 dlv
-10 0 dlv
-5 -2 dlv
-5 -5 dlv
-2 -5 dlv
-2 -7 dlv
0 -12 dlv
2 -7 dlv
2 -5 dlv
5 -5 dlv
5 -2 dlv
10 0 dlv
4 2 dlv
5 5 dlv
3 5 dlv
0 7 dlv
-12 0 dlv
dle
3854 2501 dlt
0 50 dlv
34 -50 dlv
0 50 dlv
dle
3907 2501 dlt
0 50 dlv
17 0 dlv
7 -2 dlv
5 -5 dlv
2 -5 dlv
2 -7 dlv
0 -12 dlv
-2 -7 dlv
-2 -5 dlv
-5 -5 dlv
-7 -2 dlv
-17 0 dlv
dle
3757 2652 dlt
19 -51 dlv
19 51 dlv
dle
3807 2601 dlt
0 51 dlv
21 0 dlv
8 -3 dlv
2 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-2 -2 dlv
-8 -2 dlv
-21 0 dlv
dle
16 -27 3824 2628 dls
3888 2652 dlt
-31 0 dlv
0 -51 dlv
31 0 dlv
dle
19 0 3857 2628 dls
3936 2640 dlt
-2 4 dlv
-5 5 dlv
-5 3 dlv
-9 0 dlv
-5 -3 dlv
-5 -5 dlv
-2 -4 dlv
-3 -8 dlv
0 -12 dlv
3 -7 dlv
2 -5 dlv
5 -4 dlv
5 -3 dlv
9 0 dlv
5 3 dlv
5 4 dlv
2 5 dlv
dle
3410 2702 dlt
19 -50 dlv
20 50 dlv
dle
3473 2702 dlt
-5 -3 dlv
-5 -4 dlv
-2 -5 dlv
-3 -7 dlv
0 -12 dlv
3 -8 dlv
2 -4 dlv
5 -5 dlv
5 -2 dlv
9 0 dlv
5 2 dlv
5 5 dlv
2 4 dlv
2 8 dlv
0 12 dlv
-2 7 dlv
-2 5 dlv
-5 4 dlv
-5 3 dlv
-9 0 dlv
dle
3513 2652 dlt
0 50 dlv
34 -50 dlv
0 50 dlv
dle
3787 2752 dlt
19 -50 dlv
19 50 dlv
dle
10 0 3832 2752 dls
0 -50 3837 2752 dls
10 0 3832 2702 dls
3856 2702 dlt
0 50 dlv
34 -50 dlv
0 50 dlv
dle
3909 2740 dlt
0 2 dlv
2 5 dlv
3 3 dlv
4 2 dlv
10 0 dlv
5 -2 dlv
2 -3 dlv
2 -5 dlv
0 -4 dlv
-2 -5 dlv
-5 -7 dlv
-24 -24 dlv
34 0 dlv
dle
3792 2852 dlt
19 -50 dlv
19 50 dlv
dle
10 0 3837 2852 dls
0 -50 3842 2852 dls
10 0 3837 2802 dls
3861 2802 dlt
0 50 dlv
34 -50 dlv
0 50 dlv
dle
3919 2843 dlt
4 2 dlv
8 7 dlv
0 -50 dlv
dle
891 2539 dlt
-3 5 dlv
-4 5 dlv
-5 2 dlv
-10 0 dlv
-4 -2 dlv
-5 -5 dlv
-3 -5 dlv
-2 -7 dlv
0 -12 dlv
2 -7 dlv
3 -5 dlv
5 -5 dlv
4 -2 dlv
10 0 dlv
5 2 dlv
4 5 dlv
3 5 dlv
0 7 dlv
-12 0 dlv
dle
908 2501 dlt
0 50 dlv
33 -50 dlv
0 50 dlv
dle
960 2501 dlt
0 50 dlv
17 0 dlv
7 -2 dlv
5 -5 dlv
2 -5 dlv
3 -7 dlv
0 -12 dlv
-3 -7 dlv
-2 -5 dlv
-5 -5 dlv
-7 -2 dlv
-17 0 dlv
dle
850 2652 dlt
19 -51 dlv
19 51 dlv
dle
900 2601 dlt
0 51 dlv
22 0 dlv
7 -3 dlv
3 -2 dlv
2 -5 dlv
0 -5 dlv
-2 -5 dlv
-3 -2 dlv
-7 -2 dlv
-22 0 dlv
dle
17 -27 917 2628 dls
982 2652 dlt
-31 0 dlv
0 -51 dlv
31 0 dlv
dle
19 0 951 2628 dls
1030 2640 dlt
-3 4 dlv
-5 5 dlv
-4 3 dlv
-10 0 dlv
-5 -3 dlv
-5 -5 dlv
-2 -4 dlv
-2 -8 dlv
0 -12 dlv
2 -7 dlv
2 -5 dlv
5 -4 dlv
5 -3 dlv
10 0 dlv
4 3 dlv
5 4 dlv
3 5 dlv
dle
1237 2702 dlt
19 -50 dlv
19 50 dlv
dle
1299 2702 dlt
-5 -3 dlv
-5 -4 dlv
-2 -5 dlv
-2 -7 dlv
0 -12 dlv
2 -8 dlv
2 -4 dlv
5 -5 dlv
5 -2 dlv
9 0 dlv
5 2 dlv
5 5 dlv
2 4 dlv
3 8 dlv
0 12 dlv
-3 7 dlv
-2 5 dlv
-5 4 dlv
-5 3 dlv
-9 0 dlv
dle
1340 2652 dlt
0 50 dlv
33 -50 dlv
0 50 dlv
dle
850 2752 dlt
19 -50 dlv
19 50 dlv
dle
9 0 896 2752 dls
0 -50 900 2752 dls
9 0 896 2702 dls
920 2702 dlt
0 50 dlv
33 -50 dlv
0 50 dlv
dle
972 2740 dlt
0 2 dlv
3 5 dlv
2 3 dlv
5 2 dlv
9 0 dlv
5 -2 dlv
2 -3 dlv
3 -5 dlv
0 -4 dlv
-3 -5 dlv
-4 -7 dlv
-24 -24 dlv
33 0 dlv
dle
850 2852 dlt
19 -50 dlv
19 50 dlv
dle
9 0 896 2852 dls
0 -50 900 2852 dls
9 0 896 2802 dls
920 2802 dlt
0 50 dlv
33 -50 dlv
0 50 dlv
dle
977 2843 dlt
5 2 dlv
7 7 dlv
0 -50 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2080 2852 dlt
0 40 dlv
16 -40 dlv
15 40 dlv
0 -40 dlv
dle
2126 2883 dlt
0 2 dlv
2 4 dlv
2 2 dlv
4 1 dlv
8 0 dlv
3 -1 dlv
2 -2 dlv
2 -4 dlv
0 -4 dlv
-2 -4 dlv
-4 -6 dlv
-19 -19 dlv
27 0 dlv
dle
2643 2852 dlt
0 40 dlv
15 -40 dlv
15 40 dlv
0 -40 dlv
dle
2715 2866 dlt
-28 0 dlv
19 26 dlv
0 -40 dlv
dle
2648 4052 dlt
0 40 dlv
15 -40 dlv
15 40 dlv
0 -40 dlv
dle
2695 4092 dlt
21 0 dlv
-11 -15 dlv
6 0 dlv
4 -2 dlv
1 -2 dlv
2 -6 dlv
0 -3 dlv
-2 -6 dlv
-3 -4 dlv
-6 -2 dlv
-6 0 dlv
-6 2 dlv
-2 2 dlv
-1 4 dlv
dle
2075 4052 dlt
0 40 dlv
16 -40 dlv
15 40 dlv
0 -40 dlv
dle
2125 4085 dlt
4 1 dlv
6 6 dlv
0 -40 dlv
dle
0 800 400 slc
0 800 400 sfc
366 2275 dpb
321 2320 dpv
261 2320 dpv
215 2275 dpv
261 2230 dpv
321 2230 dpv
dpu
215 3133 dpb
215 3224 dpv
271 3224 dpv
316 3179 dpv
271 3133 dpv
dpu
4583 3224 dpb
4583 3133 dpv
4527 3133 dpv
4482 3179 dpv
4527 3224 dpv
dpu
215 3535 dpb
215 3625 dpv
271 3625 dpv
316 3580 dpv
271 3535 dpv
dpu
4583 3625 dpb
4583 3535 dpv
4527 3535 dpv
4482 3580 dpv
4527 3625 dpv
dpu
4482 4087 dpb
4482 4178 dpv
4537 4178 dpv
4583 4132 dpv
4537 4087 dpv
dpu
0 2145 4804 4186 clwin
gfs
%%Trailer
%%EOF
